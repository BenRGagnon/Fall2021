GAWK(1)                                                 Utility Commands                                                 GAWK(1)



NAME
       gawk - pattern scanning and processing language

SYNOPSIS
       gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       gawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       pgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       pgawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       dgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...

DESCRIPTION
       Gawk  is the GNU Project's implementation of the AWK programming language.  It conforms to the definition of the language
       in the POSIX 1003.1 Standard.  This version in turn is based on the description in The AWK Programming Language, by  Aho,
       Kernighan,  and  Weinberger.  Gawk provides the additional features found in the current version of UNIX awk and a number
       of GNU-specific extensions.

       The command line consists of options to gawk itself, the AWK program text (if not supplied via the -f or --file options),
       and values to be made available in the ARGC and ARGV pre-defined AWK variables.

       Pgawk  is the profiling version of gawk.  It is identical in every way to gawk, except that programs run more slowly, and
       it automatically produces an execution profile in the file awkprof.out when done.  See the --profile option, below.

       Dgawk is an awk debugger. Instead of running the program directly, it loads the AWK source  code  and  then  prompts  for
       debugging  commands.   Unlike  gawk  and pgawk, dgawk only processes AWK program source provided with the -f option.  The
       debugger is documented in GAWK: Effective AWK Programming.

OPTION FORMAT
       Gawk options may be either traditional POSIX-style one letter options, or GNU-style long options.   POSIX  options  start
       with  a single “-”, while long options start with “--”.  Long options are provided for both GNU-specific features and for
       POSIX-mandated features.

       Gawk- specific options are typically used in long-option form.  Arguments to long options  are  either  joined  with  the
       option by an = sign, with no intervening spaces, or they may be provided in the next command line argument.  Long options
       may be abbreviated, as long as the abbreviation remains unique.

       Additionally, each long option has a corresponding short option, so that the option's  functionality  may  be  used  from
       within #!  executable scripts.

OPTIONS
       Gawk  accepts  the following options.  Standard options are listed first, followed by options for gawk extensions, listed
       alphabetically by short option.

       -f program-file
       --file program-file
              Read the AWK program source from the file program-file, instead of from the first command line argument.  Multiple
              -f (or --file) options may be used.

       -F fs
       --field-separator fs
              Use fs for the input field separator (the value of the FS predefined variable).

       -v var=val
       --assign var=val
              Assign the value val to the variable var, before execution of the program begins.  Such variable values are avail‐
              able to the BEGIN block of an AWK program.

       -b
       --characters-as-bytes
              Treat all input data as single-byte characters. In other words, don't pay any attention to the locale  information
              when attempting to process strings as multibyte characters.  The --posix option overrides this one.

       -c
       --traditional
              Run  in compatibility mode.  In compatibility mode, gawk behaves identically to UNIX awk; none of the GNU-specific
              extensions are recognized.  See GNU EXTENSIONS, below, for more information.

       -C
       --copyright
              Print the short version of the GNU copyright information message on the standard output and exit successfully.

       -d[file]
       --dump-variables[=file]
              Print a sorted list of global variables, their types and final values to file.  If no file is provided, gawk  uses
              a file named awkvars.out in the current directory.
              Having  a  list  of all the global variables is a good way to look for typographical errors in your programs.  You
              would also use this option if you have a large program with a lot of functions, and you want to be sure that  your
              functions  don't inadvertently use global variables that you meant to be local.  (This is a particularly easy mis‐
              take to make with simple variable names like i, j, and so on.)

       -e program-text
       --source program-text
              Use program-text as AWK program source code.  This option allows the easy intermixing of library  functions  (used
              via  the -f and --file options) with source code entered on the command line.  It is intended primarily for medium
              to large AWK programs used in shell scripts.

       -E file
       --exec file
              Similar to -f, however, this is option is the last one processed.  This should be used with #!  scripts,  particu‐
              larly  for  CGI applications, to avoid passing in options or source code (!) on the command line from a URL.  This
              option disables command-line variable assignments.

       -g
       --gen-pot
              Scan and parse the AWK program, and generate a GNU .pot (Portable Object Template) format file on standard  output
              with entries for all localizable strings in the program.  The program itself is not executed.  See the GNU gettext
              distribution for more information on .pot files.

       -h
       --help Print a relatively short summary of the available options on the standard output.  (Per the GNU Coding  Standards,
              these options cause an immediate, successful exit.)

       -L [value]
       --lint[=value]
              Provide warnings about constructs that are dubious or non-portable to other AWK implementations.  With an optional
              argument of fatal, lint warnings become fatal errors.  This may be drastic, but its use will  certainly  encourage
              the  development  of  cleaner AWK programs.  With an optional argument of invalid, only warnings about things that
              are actually invalid are issued. (This is not fully implemented yet.)

       -n
       --non-decimal-data
              Recognize octal and hexadecimal values in input data.  Use this option with great caution!

       -N
       --use-lc-numeric
              This forces gawk to use the locale's decimal point character when parsing input data.  Although the POSIX standard
              requires  this behavior, and gawk does so when --posix is in effect, the default is to follow traditional behavior
              and use a period as the decimal point, even in locales where the period is not the decimal point character.   This
              option overrides the default behavior, without the full draconian strictness of the --posix option.

       -O
       --optimize
              Enable  optimizations  upon the internal representation of the program.  Currently, this includes just simple con‐
              stant-folding. The gawk maintainer hopes to add additional optimizations over time.

       -p[prof_file]
       --profile[=prof_file]
              Send profiling data to prof_file.  The default is awkprof.out.  When run with gawk, the profile is just a  “pretty
              printed”  version of the program.  When run with pgawk, the profile contains execution counts of each statement in
              the program in the left margin and function call counts for each user-defined function.

       -P
       --posix
              This turns on compatibility mode, with the following additional restrictions:

              · \x escape sequences are not recognized.

              · Only space and tab act as field separators when FS is set to a single space, newline does not.

              · You cannot continue lines after ?  and :.

              · The synonym func for the keyword function is not recognized.

              · The operators ** and **= cannot be used in place of ^ and ^=.

       -r
       --re-interval
              Enable the use of interval expressions in regular expression matching (see Regular Expressions, below).   Interval
              expressions  were not traditionally available in the AWK language.  The POSIX standard added them, to make awk and
              egrep consistent with each other.  They are enabled by default, but this option  remains  for  use  with  --tradi‐
              tional.

       -R
       --command file
              Dgawk only.  Read stored debugger commands from file.

       -S
       --sandbox
              Runs  gawk  in  sandbox  mode, disabling the system() function, input redirection with getline, output redirection
              with print and printf, and loading dynamic extensions.  Command execution (through pipelines)  is  also  disabled.
              This  effectively  blocks  a  script from accessing local resources (except for the files specified on the command
              line).

       -t
       --lint-old
              Provide warnings about constructs that are not portable to the original version of Unix awk.

       -V
       --version
              Print version information for this particular copy of gawk on the standard output.   This  is  useful  mainly  for
              knowing  if the current copy of gawk on your system is up to date with respect to whatever the Free Software Foun‐
              dation is distributing.  This is also useful when reporting bugs.  (Per the GNU Coding  Standards,  these  options
              cause an immediate, successful exit.)

       --     Signal  the  end  of  options. This is useful to allow further arguments to the AWK program itself to start with a
              “-”.  This provides consistency with the argument parsing convention used by most other POSIX programs.

       In compatibility mode, any other options are flagged as invalid, but are otherwise ignored.  In normal operation, as long
       as  program  text  has  been supplied, unknown options are passed on to the AWK program in the ARGV array for processing.
       This is particularly useful for running AWK programs via the “#!” executable interpreter mechanism.

AWK PROGRAM EXECUTION
       An AWK program consists of a sequence of pattern-action statements and optional function definitions.

              @include "filename" pattern   { action statements }
              function name(parameter list) { statements }

       Gawk first reads the program source from the program-file(s) if specified, from arguments to --source, or from the  first
       non-option  argument  on  the  command line.  The -f and --source options may be used multiple times on the command line.
       Gawk reads the program text as if all the program-files and command line source texts  had  been  concatenated  together.
       This  is useful for building libraries of AWK functions, without having to include them in each new AWK program that uses
       them.  It also provides the ability to mix library functions with command line programs.

       In addition, lines beginning with @include may be used to include other source files into your  program,  making  library
       use even easier.

       The  environment  variable AWKPATH specifies a search path to use when finding source files named with the -f option.  If
       this variable does not exist, the default path is ".:/usr/local/share/awk".  (The actual directory  may  vary,  depending
       upon  how  gawk was built and installed.)  If a file name given to the -f option contains a “/” character, no path search
       is performed.

       Gawk executes AWK programs in the following order.  First, all variable assignments specified via the -v option are  per‐
       formed.   Next,  gawk compiles the program into an internal form.  Then, gawk executes the code in the BEGIN block(s) (if
       any), and then proceeds to read each file named in the ARGV array (up to ARGV[ARGC]).  If there are no files named on the
       command line, gawk reads the standard input.

       If  a filename on the command line has the form var=val it is treated as a variable assignment.  The variable var will be
       assigned the value val.  (This happens after any BEGIN block(s) have been run.)  Command line variable assignment is most
       useful for dynamically assigning values to the variables AWK uses to control how input is broken into fields and records.
       It is also useful for controlling state if multiple passes are needed over a single data file.

       If the value of a particular element of ARGV is empty (""), gawk skips over it.

       For each input file, if a BEGINFILE rule exists, gawk executes the associated code before processing the contents of  the
       file. Similarly, gawk executes the code associated with ENDFILE after processing the file.

       For  each record in the input, gawk tests to see if it matches any pattern in the AWK program.  For each pattern that the
       record matches, the associated action is executed.  The patterns are tested in the order they occur in the program.

       Finally, after all the input is exhausted, gawk executes the code in the END block(s) (if any).

   Command Line Directories
       According to POSIX, files named on the awk command line must be text files.  The behavior is ``undefined''  if  they  are
       not.  Most versions of awk treat a directory on the command line as a fatal error.

       Starting  with  version  4.0  of  gawk, a directory on the command line produces a warning, but is otherwise skipped.  If
       either of the --posix or --traditional options is given, then gawk reverts to treating directories on the command line as
       a fatal error.

VARIABLES, RECORDS AND FIELDS
       AWK  variables  are  dynamic;  they come into existence when they are first used.  Their values are either floating-point
       numbers or strings, or both, depending upon how they are used.  AWK also has one dimensional arrays; arrays with multiple
       dimensions  may be simulated.  Several pre-defined variables are set as a program runs; these are described as needed and
       summarized below.

   Records
       Normally, records are separated by newline characters.  You can control how records are separated by assigning values  to
       the  built-in  variable RS.  If RS is any single character, that character separates records.  Otherwise, RS is a regular
       expression.  Text in the input that matches this regular expression separates  the  record.   However,  in  compatibility
       mode, only the first character of its string value is used for separating records.  If RS is set to the null string, then
       records are separated by blank lines.  When RS is set to the null string, the newline character always acts  as  a  field
       separator, in addition to whatever value FS may have.

   Fields
       As each input record is read, gawk splits the record into fields, using the value of the FS variable as the field separa‐
       tor.  If FS is a single character, fields are separated by that character.  If FS is the null string, then each  individ‐
       ual  character becomes a separate field.  Otherwise, FS is expected to be a full regular expression.  In the special case
       that FS is a single space, fields are separated by runs of spaces and/or tabs and/or  newlines.   (But  see  the  section
       POSIX  COMPATIBILITY,  below).   NOTE: The value of IGNORECASE (see below) also affects how fields are split when FS is a
       regular expression, and how records are separated when RS is a regular expression.

       If the FIELDWIDTHS variable is set to a space separated list of numbers, each field is expected to have fixed width,  and
       gawk  splits  up the record using the specified widths.  The value of FS is ignored.  Assigning a new value to FS or FPAT
       overrides the use of FIELDWIDTHS.

       Similarly, if the FPAT variable is set to a string representing a regular expression, each field is made up of text  that
       matches  that  regular  expression.  In this case, the regular expression describes the fields themselves, instead of the
       text that separates the fields.  Assigning a new value to FS or FIELDWIDTHS overrides the use of FPAT.

       Each field in the input record may be referenced by its position, $1, $2, and so on.  $0 is  the  whole  record.   Fields
       need not be referenced by constants:

              n = 5
              print $n

       prints the fifth field in the input record.

       The variable NF is set to the total number of fields in the input record.

       References  to non-existent fields (i.e. fields after $NF) produce the null-string.  However, assigning to a non-existent
       field (e.g., $(NF+2) = 5) increases the value of NF, creates any intervening fields with the null string as their  value,
       and causes the value of $0 to be recomputed, with the fields being separated by the value of OFS.  References to negative
       numbered fields cause a fatal error.  Decrementing NF causes the values of fields past the new value to be lost, and  the
       value of $0 to be recomputed, with the fields being separated by the value of OFS.

       Assigning a value to an existing field causes the whole record to be rebuilt when $0 is referenced.  Similarly, assigning
       a value to $0 causes the record to be resplit, creating new values for the fields.

   Built-in Variables
       Gawk's built-in variables are:

       ARGC        The number of command line arguments (does not include options to gawk, or the program source).

       ARGIND      The index in ARGV of the current file being processed.

       ARGV        Array of command line arguments.  The array is indexed from 0 to ARGC - 1.  Dynamically changing the contents
                   of ARGV can control the files used for data.

       BINMODE     On non-POSIX systems, specifies use of “binary” mode for all file I/O.  Numeric values of 1, 2, or 3, specify
                   that input files, output files, or all files, respectively, should use binary I/O.  String values of "r",  or
                   "w" specify that input files, or output files, respectively, should use binary I/O.  String values of "rw" or
                   "wr" specify that all files should use binary I/O.  Any other string value is treated as "rw", but  generates
                   a warning message.

       CONVFMT     The conversion format for numbers, "%.6g", by default.

       ENVIRON     An  array  containing  the  values of the current environment.  The array is indexed by the environment vari‐
                   ables, each element being the value of that variable (e.g., ENVIRON["HOME"] might be /home/arnold).  Changing
                   this array does not affect the environment seen by programs which gawk spawns via redirection or the system()
                   function.

       ERRNO       If a system error occurs either doing a redirection for getline, during a  read  for  getline,  or  during  a
                   close(),  then ERRNO will contain a string describing the error.  The value is subject to translation in non-
                   English locales.

       FIELDWIDTHS A whitespace separated list of field widths.  When set, gawk parses the input into  fields  of  fixed  width,
                   instead of using the value of the FS variable as the field separator.  See Fields, above.

       FILENAME    The  name of the current input file.  If no files are specified on the command line, the value of FILENAME is
                   “-”.  However, FILENAME is undefined inside the BEGIN block (unless set by getline).

       FNR         The input record number in the current input file.

       FPAT        A regular expression describing the contents of the fields in a record.  When set, gawk parses the input into
                   fields,  where  the fields match the regular expression, instead of using the value of the FS variable as the
                   field separator.  See Fields, above.

       FS          The input field separator, a space by default.  See Fields, above.

       IGNORECASE  Controls the case-sensitivity of all regular expression and string operations.  If IGNORECASE has a  non-zero
                   value,  then string comparisons and pattern matching in rules, field splitting with FS and FPAT, record sepa‐
                   rating with RS, regular expression matching with ~ and !~, and the gensub(), gsub(), index(),  match(),  pat‐
                   split(),  split(),  and  sub()  built-in  functions all ignore case when doing regular expression operations.
                   NOTE: Array subscripting is not affected.  However, the asort() and asorti() functions are affected.
                   Thus, if IGNORECASE is not equal to zero, /aB/ matches all of the strings "ab", "aB",  "Ab",  and  "AB".   As
                   with  all AWK variables, the initial value of IGNORECASE is zero, so all regular expression and string opera‐
                   tions are normally case-sensitive.

       LINT        Provides dynamic control of the --lint option from within an AWK program.  When true, gawk prints lint  warn‐
                   ings.  When  false,  it does not.  When assigned the string value "fatal", lint warnings become fatal errors,
                   exactly like --lint=fatal.  Any other true value just prints warnings.

       NF          The number of fields in the current input record.

       NR          The total number of input records seen so far.

       OFMT        The output format for numbers, "%.6g", by default.

       OFS         The output field separator, a space by default.

       ORS         The output record separator, by default a newline.

       PROCINFO    The elements of this array provide access to information about the running AWK  program.   On  some  systems,
                   there  may  be elements in the array, "group1" through "groupn" for some n, which is the number of supplemen‐
                   tary groups that the process has.  Use the in operator to test for these elements.   The  following  elements
                   are guaranteed to be available:

                   PROCINFO["egid"]    the value of the getegid(2) system call.

                   PROCINFO["strftime"]
                                       The default time format string for strftime().

                   PROCINFO["euid"]    the value of the geteuid(2) system call.

                   PROCINFO["FS"]      "FS"  if  field splitting with FS is in effect, "FPAT" if field splitting with FPAT is in
                                       effect, or "FIELDWIDTHS" if field splitting with FIELDWIDTHS is in effect.

                   PROCINFO["gid"]     the value of the getgid(2) system call.

                   PROCINFO["pgrpid"]  the process group ID of the current process.

                   PROCINFO["pid"]     the process ID of the current process.

                   PROCINFO["ppid"]    the parent process ID of the current process.

                   PROCINFO["uid"]     the value of the getuid(2) system call.

                   PROCINFO["sorted_in"]
                                       If this element exists in PROCINFO, then its value controls the order in which array ele‐
                                       ments  are  traversed in for loops.  Supported values are "@ind_str_asc", "@ind_num_asc",
                                       "@val_type_asc",  "@val_str_asc",   "@val_num_asc",   "@ind_str_desc",   "@ind_num_desc",
                                       "@val_type_desc",  "@val_str_desc", "@val_num_desc", and "@unsorted".  The value can also
                                       be the name of any comparison function defined as follows:

                          function cmp_func(i1, v1, i2, v2)

                   where i1 and i2 are the indices, and v1 and v2 are the corresponding values of the two  elements  being  com‐
                   pared.   It  should  return a number less than, equal to, or greater than 0, depending on how the elements of
                   the array are to be ordered.

                   PROCINFO["version"]
                          the version of gawk.

       RS          The input record separator, by default a newline.

       RT          The record terminator.  Gawk sets RT to the input text that matched the character or regular expression spec‐
                   ified by RS.

       RSTART      The  index  of  the  first character matched by match(); 0 if no match.  (This implies that character indices
                   start at one.)

       RLENGTH     The length of the string matched by match(); -1 if no match.

       SUBSEP      The character used to separate multiple subscripts in array elements, by default "\034".

       TEXTDOMAIN  The text domain of the AWK program; used to find the localized translations for the program's strings.

   Arrays
       Arrays are subscripted with an expression between square brackets ([ and ]).  If the expression  is  an  expression  list
       (expr,  expr  ...)   then  the  array subscript is a string consisting of the concatenation of the (string) value of each
       expression, separated by the value of the SUBSEP variable.  This  facility  is  used  to  simulate  multiply  dimensioned
       arrays.  For example:

              i = "A"; j = "B"; k = "C"
              x[i, j, k] = "hello, world\n"

       assigns  the  string  "hello,  world\n"  to the element of the array x which is indexed by the string "A\034B\034C".  All
       arrays in AWK are associative, i.e. indexed by string values.

       The special operator in may be used to test if an array has an index consisting of a particular value:

              if (val in array)
                   print array[val]

       If the array has multiple subscripts, use (i, j) in array.

       The in construct may also be used in a for loop to iterate over all the elements of an array.

       An element may be deleted from an array using the delete statement.  The delete statement may also be used to delete  the
       entire contents of an array, just by specifying the array name without a subscript.

       gawk  supports true multidimensional arrays. It does not require that such arrays be ``rectangular'' as in C or C++.  For
       example:
              a[1] = 5
              a[2][1] = 6
              a[2][2] = 7

   Variable Typing And Conversion
       Variables and fields may be (floating point) numbers, or strings, or both.  How the value of a  variable  is  interpreted
       depends  upon  its context.  If used in a numeric expression, it will be treated as a number; if used as a string it will
       be treated as a string.

       To force a variable to be treated as a number, add 0 to it; to force it to be treated as a string,  concatenate  it  with
       the null string.

       When  a string must be converted to a number, the conversion is accomplished using strtod(3).  A number is converted to a
       string by using the value of CONVFMT as a format string for sprintf(3), with the numeric value of  the  variable  as  the
       argument.   However, even though all numbers in AWK are floating-point, integral values are always converted as integers.
       Thus, given

              CONVFMT = "%2.2f"
              a = 12
              b = a ""

       the variable b has a string value of "12" and not "12.00".

       NOTE: When operating in POSIX mode (such as with the --posix command line option), beware that locale settings may inter‐
       fere  with the way decimal numbers are treated: the decimal separator of the numbers you are feeding to gawk must conform
       to what your locale would expect, be it a comma (,) or a period (.).

       Gawk performs comparisons as follows: If two variables are numeric, they are  compared  numerically.   If  one  value  is
       numeric  and the other has a string value that is a “numeric string,” then comparisons are also done numerically.  Other‐
       wise, the numeric value is converted to a string and a string comparison is performed.   Two  strings  are  compared,  of
       course, as strings.

       Note  that  string  constants,  such  as  "57", are not numeric strings, they are string constants.  The idea of “numeric
       string” only applies to fields, getline input, FILENAME, ARGV elements, ENVIRON elements and the  elements  of  an  array
       created  by split() or patsplit() that are numeric strings.  The basic idea is that user input, and only user input, that
       looks numeric, should be treated that way.

       Uninitialized variables have the numeric value 0 and the string value "" (the null, or empty, string).

   Octal and Hexadecimal Constants
       You may use C-style octal and hexadecimal constants in your AWK program source code.  For example, the octal value 011 is
       equal to decimal 9, and the hexadecimal value 0x11 is equal to decimal 17.

   String Constants
       String  constants in AWK are sequences of characters enclosed between double quotes (like "value").  Within strings, cer‐
       tain escape sequences are recognized, as in C.  These are:

       \\   A literal backslash.

       \a   The “alert” character; usually the ASCII BEL character.

       \b   backspace.

       \f   form-feed.

       \n   newline.

       \r   carriage return.

       \t   horizontal tab.

       \v   vertical tab.

       \xhex digits
            The character represented by the string of hexadecimal digits following the \x.  As in ANSI C, all  following  hexa‐
            decimal  digits  are  considered part of the escape sequence.  (This feature should tell us something about language
            design by committee.)  E.g., "\x1B" is the ASCII ESC (escape) character.

       \ddd The character represented by the 1-, 2-, or 3-digit sequence of  octal  digits.   E.g.,  "\033"  is  the  ASCII  ESC
            (escape) character.

       \c   The literal character c.

       The escape sequences may also be used inside constant regular expressions (e.g., /[ \t\f\n\r\v]/ matches whitespace char‐
       acters).

       In compatibility mode, the characters represented by octal and hexadecimal escape sequences are  treated  literally  when
       used in regular expression constants.  Thus, /a\52b/ is equivalent to /a\*b/.

PATTERNS AND ACTIONS
       AWK  is a line-oriented language.  The pattern comes first, and then the action.  Action statements are enclosed in { and
       }.  Either the pattern may be missing, or the action may be missing, but, of course, not both.  If the pattern  is  miss‐
       ing, the action is executed for every single record of input.  A missing action is equivalent to

              { print }

       which prints the entire record.

       Comments  begin with the # character, and continue until the end of the line.  Blank lines may be used to separate state‐
       ments.  Normally, a statement ends with a newline, however, this is not the case for lines ending in a comma,  {,  ?,  :,
       &&,  or  ||.   Lines  ending  in do or else also have their statements automatically continued on the following line.  In
       other cases, a line can be continued by ending it with a “\”, in which case the newline is ignored.

       Multiple statements may be put on one line by separating them with a “;”.  This applies to both the statements within the
       action part of a pattern-action pair (the usual case), and to the pattern-action statements themselves.

   Patterns
       AWK patterns may be one of the following:

              BEGIN
              END
              BEGINFILE
              ENDFILE
              /regular expression/
              relational expression
              pattern && pattern
              pattern || pattern
              pattern ? pattern : pattern
              (pattern)
              ! pattern
              pattern1, pattern2

       BEGIN  and  END  are two special kinds of patterns which are not tested against the input.  The action parts of all BEGIN
       patterns are merged as if all the statements had been written in a single BEGIN block.  They are executed before  any  of
       the  input  is  read.  Similarly, all the END blocks are merged, and executed when all the input is exhausted (or when an
       exit statement is executed).  BEGIN and END patterns cannot be combined  with  other  patterns  in  pattern  expressions.
       BEGIN and END patterns cannot have missing action parts.

       BEGINFILE  and  ENDFILE are additional special patterns whose bodies are executed before reading the first record of each
       command line input file and after reading the last record of each file.  Inside the BEGINFILE rule, the  value  of  ERRNO
       will  be  the  empty string if the file could be opened successfully.  Otherwise, there is some problem with the file and
       the code should use nextfile to skip it. If that is not done, gawk produces its usual fatal error for files  that  cannot
       be opened.

       For  /regular  expression/  patterns, the associated statement is executed for each input record that matches the regular
       expression.  Regular expressions are the same as those in egrep(1), and are summarized below.

       A relational expression may use any of the operators defined below in the  section  on  actions.   These  generally  test
       whether certain fields match certain regular expressions.

       The  &&, ||, and !  operators are logical AND, logical OR, and logical NOT, respectively, as in C.  They do short-circuit
       evaluation, also as in C, and are used for combining more primitive pattern expressions.  As in most languages, parenthe‐
       ses may be used to change the order of evaluation.

       The  ?:  operator  is like the same operator in C.  If the first pattern is true then the pattern used for testing is the
       second pattern, otherwise it is the third.  Only one of the second and third patterns is evaluated.

       The pattern1, pattern2 form of an expression is called a range pattern.  It matches all input  records  starting  with  a
       record  that  matches pattern1, and continuing until a record that matches pattern2, inclusive.  It does not combine with
       any other sort of pattern expression.

   Regular Expressions
       Regular expressions are the extended kind found in egrep.  They are composed of characters as follows:

       c          matches the non-metacharacter c.

       \c         matches the literal character c.

       .          matches any character including newline.

       ^          matches the beginning of a string.

       $          matches the end of a string.

       [abc...]   character list, matches any of the characters abc....

       [^abc...]  negated character list, matches any character except abc....

       r1|r2      alternation: matches either r1 or r2.

       r1r2       concatenation: matches r1, and then r2.

       r+         matches one or more r's.

       r*         matches zero or more r's.

       r?         matches zero or one r's.

       (r)        grouping: matches r.

       r{n}
       r{n,}
       r{n,m}     One or two numbers inside braces denote an interval expression.  If there is one number  in  the  braces,  the
                  preceding  regular  expression  r  is  repeated  n times.  If there are two numbers separated by a comma, r is
                  repeated n to m times.  If there is one number followed by a comma, then r is repeated at least n times.

       \y         matches the empty string at either the beginning or the end of a word.

       \B         matches the empty string within a word.

       \<         matches the empty string at the beginning of a word.

       \>         matches the empty string at the end of a word.

       \s         matches any whitespace character.

       \S         matches any nonwhitespace character.

       \w         matches any word-constituent character (letter, digit, or underscore).

       \W         matches any character that is not word-constituent.

       \`         matches the empty string at the beginning of a buffer (string).

       \'         matches the empty string at the end of a buffer.

       The escape sequences that are valid in string constants (see below) are also valid in regular expressions.

       Character classes are a feature introduced in the POSIX standard.  A character class is a special notation for describing
       lists  of  characters that have a specific attribute, but where the actual characters themselves can vary from country to
       country and/or from character set to character set.  For example, the notion of what is an alphabetic  character  differs
       in the USA and in France.

       A  character class is only valid in a regular expression inside the brackets of a character list.  Character classes con‐
       sist of [:, a keyword denoting the class, and :].  The character classes defined by the POSIX standard are:

       [:alnum:]  Alphanumeric characters.

       [:alpha:]  Alphabetic characters.

       [:blank:]  Space or tab characters.

       [:cntrl:]  Control characters.

       [:digit:]  Numeric characters.

       [:graph:]  Characters that are both printable and visible.  (A space is printable, but not visible, while an a is both.)

       [:lower:]  Lowercase alphabetic characters.

       [:print:]  Printable characters (characters that are not control characters.)

       [:punct:]  Punctuation characters (characters that are not letter, digits, control characters, or space characters).

       [:space:]  Space characters (such as space, tab, and formfeed, to name a few).

       [:upper:]  Uppercase alphabetic characters.

       [:xdigit:] Characters that are hexadecimal digits.

       For example, before the POSIX standard, to match alphanumeric characters, you would have had to write /[A-Za-z0-9]/.   If
       your  character  set had other alphabetic characters in it, this would not match them, and if your character set collated
       differently from ASCII, this might not even match the ASCII alphanumeric characters.  With the POSIX  character  classes,
       you can write /[[:alnum:]]/, and this matches the alphabetic and numeric characters in your character set, no matter what
       it is.

       Two additional special sequences can appear in character lists.  These apply to non-ASCII character sets, which can  have
       single  symbols (called collating elements) that are represented with more than one character, as well as several charac‐
       ters that are equivalent for collating, or sorting, purposes.  (E.g., in French, a plain “e” and a grave-accented “`” are
       equivalent.)

       Collating Symbols
              A collating symbol is a multi-character collating element enclosed in [.  and .].  For example, if ch is a collat‐
              ing element, then [[.ch.]]  is a regular expression that matches this collating element, while [ch] is  a  regular
              expression that matches either c or h.

       Equivalence Classes
              An equivalence class is a locale-specific name for a list of characters that are equivalent.  The name is enclosed
              in [= and =].  For example, the name e might be used to represent all of “e,” “´,” and “`.”  In this case, [[=e=]]
              is a regular expression that matches any of e, ´, or `.

       These  features  are  very  valuable  in  non-English speaking locales.  The library functions that gawk uses for regular
       expression matching currently only recognize POSIX character classes; they do not recognize collating symbols or  equiva‐
       lence classes.

       The \y, \B, \<, \>, \s, \S, \w, \W, \`, and \' operators are specific to gawk; they are extensions based on facilities in
       the GNU regular expression libraries.

       The various command line options control how gawk interprets characters in regular expressions.

       No options
              In the default case, gawk provide all the facilities of POSIX regular expressions and the GNU  regular  expression
              operators described above.

       --posix
              Only POSIX regular expressions are supported, the GNU operators are not special.  (E.g., \w matches a literal w).

       --traditional
              Traditional Unix awk regular expressions are matched.  The GNU operators are not special, and interval expressions
              are not available.  Characters described by octal and hexadecimal escape sequences are treated literally, even  if
              they represent regular expression metacharacters.

       --re-interval
              Allow interval expressions in regular expressions, even if --traditional has been provided.

   Actions
       Action  statements  are enclosed in braces, { and }.  Action statements consist of the usual assignment, conditional, and
       looping statements found in most languages.  The operators, control statements, and input/output statements available are
       patterned after those in C.

   Operators
       The operators in AWK, in order of decreasing precedence, are

       (...)       Grouping

       $           Field reference.

       ++ --       Increment and decrement, both prefix and postfix.

       ^           Exponentiation (** may also be used, and **= for the assignment operator).

       + - !       Unary plus, unary minus, and logical negation.

       * / %       Multiplication, division, and modulus.

       + -         Addition and subtraction.

       space       String concatenation.

       |   |&      Piped I/O for getline, print, and printf.

       < > <= >= != ==
                   The regular relational operators.

       ~ !~        Regular expression match, negated match.  NOTE: Do not use a constant regular expression (/foo/) on the left-
                   hand side of a ~ or !~.  Only use one on the right-hand side.  The expression /foo/ ~ exp has the same  mean‐
                   ing as (($0 ~ /foo/) ~ exp).  This is usually not what was intended.

       in          Array membership.

       &&          Logical AND.

       ||          Logical OR.

       ?:          The  C  conditional expression.  This has the form expr1 ? expr2 : expr3.  If expr1 is true, the value of the
                   expression is expr2, otherwise it is expr3.  Only one of expr2 and expr3 is evaluated.

       = += -= *= /= %= ^=
                   Assignment.  Both absolute assignment (var = value) and operator-assignment (the other forms) are supported.

   Control Statements
       The control statements are as follows:

              if (condition) statement [ else statement ]
              while (condition) statement
              do statement while (condition)
              for (expr1; expr2; expr3) statement
              for (var in array) statement
              break
              continue
              delete array[index]
              delete array
              exit [ expression ]
              { statements }
              switch (expression) {
              case value|regex : statement
              ...
              [ default: statement ]
              }

   I/O Statements
       The input/output statements are as follows:

       close(file [, how])   Close file, pipe or co-process.  The optional how should only be used when closing  one  end  of  a
                             two-way pipe to a co-process.  It must be a string value, either "to" or "from".

       getline               Set $0 from next input record; set NF, NR, FNR.

       getline <file         Set $0 from next record of file; set NF.

       getline var           Set var from next input record; set NR, FNR.

       getline var <file     Set var from next record of file.

       command | getline [var]
                             Run command piping the output either into $0 or var, as above.

       command |& getline [var]
                             Run  command as a co-process piping the output either into $0 or var, as above.  Co-processes are a
                             gawk extension.  (command can also be a socket.  See the subsection Special File Names, below.)

       next                  Stop processing the current input record.  The next input record is read and processing starts over
                             with  the  first  pattern  in  the  AWK  program.  If the end of the input data is reached, the END
                             block(s), if any, are executed.

       nextfile              Stop processing the current input file.  The next input record read comes from the next input file.
                             FILENAME  and ARGIND are updated, FNR is reset to 1, and processing starts over with the first pat‐
                             tern in the AWK program. If the end of the input data is reached, the END  block(s),  if  any,  are
                             executed.

       print                 Print the current record.  The output record is terminated with the value of the ORS variable.

       print expr-list       Print  expressions.   Each  expression  is  separated by the value of the OFS variable.  The output
                             record is terminated with the value of the ORS variable.

       print expr-list >file Print expressions on file.  Each expression is separated by the value of  the  OFS  variable.   The
                             output record is terminated with the value of the ORS variable.

       printf fmt, expr-list Format and print.  See The printf Statement, below.

       printf fmt, expr-list >file
                             Format and print on file.

       system(cmd-line)      Execute  the command cmd-line, and return the exit status.  (This may not be available on non-POSIX
                             systems.)

       fflush([file])        Flush any buffers associated with the open output file or pipe file.  If file is missing or  if  it
                             is the null string, then flush all open output files and pipes.

       Additional output redirections are allowed for print and printf.

       print ... >> file
              Appends output to the file.

       print ... | command
              Writes on a pipe.

       print ... |& command
              Sends data to a co-process or socket.  (See also the subsection Special File Names, below.)

       The  getline  command returns 1 on success, 0 on end of file, and -1 on an error.  Upon an error, ERRNO contains a string
       describing the problem.

       NOTE: Failure in opening a two-way socket will result in a non-fatal error being returned to  the  calling  function.  If
       using a pipe, co-process, or socket to getline, or from print or printf within a loop, you must use close() to create new
       instances of the command or socket.  AWK does not automatically close pipes, sockets, or co-processes  when  they  return
       EOF.

   The printf Statement
       The AWK versions of the printf statement and sprintf() function (see below) accept the following conversion specification
       formats:

       %c      A single character.  If the argument used for %c is numeric, it is treated as a character  and  printed.   Other‐
               wise, the argument is assumed to be a string, and the only first character of that string is printed.

       %d, %i  A decimal number (the integer part).

       %e, %E  A floating point number of the form [-]d.dddddde[+-]dd.  The %E format uses E instead of e.

       %f, %F  A  floating  point number of the form [-]ddd.dddddd.  If the system library supports it, %F is available as well.
               This is like %f, but uses capital letters for special “not a number” and “infinity” values. If %F is  not  avail‐
               able, gawk uses %f.

       %g, %G  Use  %e  or  %f  conversion,  whichever  is shorter, with nonsignificant zeros suppressed.  The %G format uses %E
               instead of %e.

       %o      An unsigned octal number (also an integer).

       %u      An unsigned decimal number (again, an integer).

       %s      A character string.

       %x, %X  An unsigned hexadecimal number (an integer).  The %X format uses ABCDEF instead of abcdef.

       %%      A single % character; no argument is converted.

       Optional, additional parameters may lie between the % and the control letter:

       count$ Use the count'th argument at this point in the formatting.  This is called a positional specifier and is  intended
              primarily  for  use in translated versions of format strings, not in the original text of an AWK program.  It is a
              gawk extension.

       -      The expression should be left-justified within its field.

       space  For numeric conversions, prefix positive values with a space, and negative values with a minus sign.

       +      The plus sign, used before the width modifier (see below), says to always supply a sign for  numeric  conversions,
              even if the data to be formatted is positive.  The + overrides the space modifier.

       #      Use  an  “alternate  form”  for certain control letters.  For %o, supply a leading zero.  For %x, and %X, supply a
              leading 0x or 0X for a nonzero result.  For %e, %E, %f and %F, the result always contains a  decimal  point.   For
              %g, and %G, trailing zeros are not removed from the result.

       0      A  leading  0  (zero)  acts as a flag, that indicates output should be padded with zeroes instead of spaces.  This
              applies only to the numeric output formats.  This flag only has an effect when the field width is wider  than  the
              value to be printed.

       width  The field should be padded to this width.  The field is normally padded with spaces.  If the 0 flag has been used,
              it is padded with zeroes.

       .prec  A number that specifies the precision to use when printing.  For the %e, %E, %f and %F,  formats,  this  specifies
              the number of digits you want printed to the right of the decimal point.  For the %g, and %G formats, it specifies
              the maximum number of significant digits.  For the %d, %i, %o, %u, %x, and %X formats, it  specifies  the  minimum
              number  of  digits to print.  For %s, it specifies the maximum number of characters from the string that should be
              printed.

       The dynamic width and prec capabilities of the ANSI C printf() routines are supported.  A * in place of either the  width
       or  prec  specifications  causes  their values to be taken from the argument list to printf or sprintf().  To use a posi‐
       tional specifier with a dynamic width or precision, supply the count$ after the * in the  format  string.   For  example,
       "%3$*2$.*1$s".

   Special File Names
       When  doing  I/O redirection from either print or printf into a file, or via getline from a file, gawk recognizes certain
       special filenames internally.  These filenames allow access to open file descriptors inherited from gawk's parent process
       (usually the shell).  These file names may also be used on the command line to name data files.  The filenames are:

       /dev/stdin  The standard input.

       /dev/stdout The standard output.

       /dev/stderr The standard error output.

       /dev/fd/n   The file associated with the open file descriptor n.

       These are particularly useful for error messages.  For example:

              print "You blew it!" > "/dev/stderr"

       whereas you would otherwise have to use

              print "You blew it!" | "cat 1>&2"

       The following special filenames may be used with the |& co-process operator for creating TCP/IP network connections:

       /inet/tcp/lport/rhost/rport
       /inet4/tcp/lport/rhost/rport
       /inet6/tcp/lport/rhost/rport
              Files  for  a TCP/IP connection on local port lport to remote host rhost on remote port rport.  Use a port of 0 to
              have the system pick a port.  Use /inet4 to force an IPv4 connection, and /inet6  to  force  an  IPv6  connection.
              Plain /inet uses the system default (most likely IPv4).

       /inet/udp/lport/rhost/rport
       /inet4/udp/lport/rhost/rport
       /inet6/udp/lport/rhost/rport
              Similar, but use UDP/IP instead of TCP/IP.

   Numeric Functions
       AWK has the following built-in arithmetic functions:

       atan2(y, x)   Return the arctangent of y/x in radians.

       cos(expr)     Return the cosine of expr, which is in radians.

       exp(expr)     The exponential function.

       int(expr)     Truncate to integer.

       log(expr)     The natural logarithm function.

       rand()        Return a random number N, between 0 and 1, such that 0 ≤ N < 1.

       sin(expr)     Return the sine of expr, which is in radians.

       sqrt(expr)    The square root function.

       srand([expr]) Use  expr  as  the  new seed for the random number generator.  If no expr is provided, use the time of day.
                     The return value is the previous seed for the random number generator.

   String Functions
       Gawk has the following built-in string functions:

       asort(s [, d [, how] ]) Return the number of elements in the source array s.  Sort the contents of s using gawk's  normal
                               rules  for comparing values, and replace the indices of the sorted values s with sequential inte‐
                               gers starting with 1. If the optional destination array d is specified, then  first  duplicate  s
                               into d, and then sort d, leaving the indices of the source array s unchanged. The optional string
                               how controls the direction and the comparison mode.  Valid values for how are any of the  strings
                               valid  for  PROCINFO["sorted_in"].  It can also be the name of a user-defined comparison function
                               as described in PROCINFO["sorted_in"].

       asorti(s [, d [, how] ])
                               Return the number of elements in the source array s.   The  behavior  is  the  same  as  that  of
                               asort(),  except  that  the array indices are used for sorting, not the array values.  When done,
                               the array is indexed numerically, and the values are those of the original indices.  The original
                               values  are  lost; thus provide a second array if you wish to preserve the original.  The purpose
                               of the optional string how is the same as described in asort() above.

       gensub(r, s, h [, t])   Search the target string t for matches of the regular expression r.  If h is a  string  beginning
                               with  g  or  G,  then replace all matches of r with s.  Otherwise, h is a number indicating which
                               match of r to replace.  If t is not supplied, use $0 instead.  Within the replacement text s, the
                               sequence  \n,  where n is a digit from 1 to 9, may be used to indicate just the text that matched
                               the n'th parenthesized subexpression.  The sequence \0 represents the  entire  matched  text,  as
                               does  the character &.  Unlike sub() and gsub(), the modified string is returned as the result of
                               the function, and the original target string is not changed.

       gsub(r, s [, t])        For each substring matching the regular expression r in the string t, substitute  the  string  s,
                               and  return  the number of substitutions.  If t is not supplied, use $0.  An & in the replacement
                               text is replaced with the text that was actually matched.  Use \& to get a literal &.  (This must
                               be  typed  as "\\&"; see GAWK: Effective AWK Programming for a fuller discussion of the rules for
                               &'s and backslashes in the replacement text of sub(), gsub(), and gensub().)

       index(s, t)             Return the index of the string t in the string s, or 0 if t is not present.  (This  implies  that
                               character indices start at one.)

       length([s])             Return  the  length of the string s, or the length of $0 if s is not supplied.  As a non-standard
                               extension, with an array argument, length() returns the number of elements in the array.

       match(s, r [, a])       Return the position in s where the regular expression r occurs, or 0 if r is not present, and set
                               the  values  of RSTART and RLENGTH.  Note that the argument order is the same as for the ~ opera‐
                               tor: str ~ re.  If array a is provided, a is cleared and then elements 1  through  n  are  filled
                               with  the  portions of s that match the corresponding parenthesized subexpression in r.  The 0'th
                               element of a contains the portion of s matched by the entire regular  expression  r.   Subscripts
                               a[n,  "start"],  and  a[n,  "length"] provide the starting index in the string and length respec‐
                               tively, of each matching substring.

       patsplit(s, a [, r [, seps] ])
                               Split the string s into the array a and the separators array seps on the  regular  expression  r,
                               and return the number of fields.  Element values are the portions of s that matched r.  The value
                               of seps[i] is the separator that appeared in front of a[i+1].  If r  is  omitted,  FPAT  is  used
                               instead.  The arrays a and seps are cleared first.  Splitting behaves identically to field split‐
                               ting with FPAT, described above.

       split(s, a [, r [, seps] ])
                               Split the string s into the array a and the separators array seps on the  regular  expression  r,
                               and return the number of fields.  If r is omitted, FS is used instead.  The arrays a and seps are
                               cleared first.  seps[i] is the field separator matched by r between a[i] and a[i+1].  If r  is  a
                               single space, then leading whitespace in s goes into the extra array element seps[0] and trailing
                               whitespace goes into the extra array element seps[n], where n is the return value of split(s,  a,
                               r, seps).  Splitting behaves identically to field splitting, described above.

       sprintf(fmt, expr-list) Prints expr-list according to fmt, and returns the resulting string.

       strtonum(str)           Examine  str,  and  return its numeric value.  If str begins with a leading 0, strtonum() assumes
                               that str is an octal number.  If str begins with a leading 0x or 0X, strtonum() assumes that  str
                               is a hexadecimal number.  Otherwise, decimal is assumed.

       sub(r, s [, t])         Just like gsub(), but replace only the first matching substring.

       substr(s, i [, n])      Return the at most n-character substring of s starting at i.  If n is omitted, use the rest of s.

       tolower(str)            Return  a  copy  of  the string str, with all the uppercase characters in str translated to their
                               corresponding lowercase counterparts.  Non-alphabetic characters are left unchanged.

       toupper(str)            Return a copy of the string str, with all the lowercase characters in  str  translated  to  their
                               corresponding uppercase counterparts.  Non-alphabetic characters are left unchanged.

       Gawk  is  multibyte  aware.  This means that index(), length(), substr() and match() all work in terms of characters, not
       bytes.

   Time Functions
       Since one of the primary uses of AWK programs is processing log files that contain time stamp information, gawk  provides
       the following functions for obtaining time stamps and formatting them.

       mktime(datespec)
                 Turn datespec into a time stamp of the same form as returned by systime(), and return the result.  The datespec
                 is a string of the form YYYY MM DD HH MM SS[ DST].  The contents of the string are six or seven numbers  repre‐
                 senting  respectively  the  full year including century, the month from 1 to 12, the day of the month from 1 to
                 31, the hour of the day from 0 to 23, the minute from 0 to 59, the second from 0 to 60, and  an  optional  day‐
                 light  saving  flag.  The values of these numbers need not be within the ranges specified; for example, an hour
                 of -1 means 1 hour before midnight.  The origin-zero Gregorian calendar is assumed, with year 0 preceding  year
                 1  and year -1 preceding year 0.  The time is assumed to be in the local timezone.  If the daylight saving flag
                 is positive, the time is assumed to be daylight saving time; if zero, the time is assumed to be standard  time;
                 and if negative (the default), mktime() attempts to determine whether daylight saving time is in effect for the
                 specified time.  If datespec does not contain enough elements or  if  the  resulting  time  is  out  of  range,
                 mktime() returns -1.

       strftime([format [, timestamp[, utc-flag]]])
                 Format timestamp according to the specification in format.  If utc-flag is present and is non-zero or non-null,
                 the result is in UTC, otherwise the result is in local time.  The timestamp should  be  of  the  same  form  as
                 returned  by  systime().   If  timestamp  is missing, the current time of day is used.  If format is missing, a
                 default format equivalent to the output of date(1) is used.  The default format is available in PROCINFO["strf‐
                 time"].   See the specification for the strftime() function in ANSI C for the format conversions that are guar‐
                 anteed to be available.

       systime() Return the current time of day as the number of seconds since the Epoch (1970-01-01 00:00:00 UTC on POSIX  sys‐
                 tems).

   Bit Manipulations Functions
       Gawk  supplies  the following bit manipulation functions.  They work by converting double-precision floating point values
       to uintmax_t integers, doing the operation, and then converting the result back to floating point.  The functions are:

       and(v1, v2)         Return the bitwise AND of the values provided by v1 and v2.

       compl(val)          Return the bitwise complement of val.

       lshift(val, count)  Return the value of val, shifted left by count bits.

       or(v1, v2)          Return the bitwise OR of the values provided by v1 and v2.

       rshift(val, count)  Return the value of val, shifted right by count bits.

       xor(v1, v2)         Return the bitwise XOR of the values provided by v1 and v2.

   Type Function
       The following function is for use with multidimensional arrays.

       isarray(x)
              Return true if x is an array, false otherwise.

   Internationalization Functions
       The following functions may be used from within your AWK program for translating strings at run-time.  For full  details,
       see GAWK: Effective AWK Programming.

       bindtextdomain(directory [, domain])
              Specify the directory where gawk looks for the .mo files, in case they will not or cannot be placed in the ``stan‐
              dard'' locations (e.g., during testing).  It returns the directory where domain is ``bound.''
              The default domain is the value of TEXTDOMAIN.  If directory  is  the  null  string  (""),  then  bindtextdomain()
              returns the current binding for the given domain.

       dcgettext(string [, domain [, category]])
              Return the translation of string in text domain domain for locale category category.  The default value for domain
              is the current value of TEXTDOMAIN.  The default value for category is "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to one of the known locale categories  described  in
              GAWK:  Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if you want to use the cur‐
              rent domain.

       dcngettext(string1 , string2 , number [, domain [, category]])
              Return the plural form used for number of the translation of string1 and string2 in text domain domain for  locale
              category  category.  The default value for domain is the current value of TEXTDOMAIN.  The default value for cate‐
              gory is "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to one of the known locale categories  described  in
              GAWK:  Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if you want to use the cur‐
              rent domain.

USER-DEFINED FUNCTIONS
       Functions in AWK are defined as follows:

              function name(parameter list) { statements }

       Functions are executed when they are called from within expressions in either patterns  or  actions.   Actual  parameters
       supplied  in the function call are used to instantiate the formal parameters declared in the function.  Arrays are passed
       by reference, other variables are passed by value.

       Since functions were not originally part of the AWK language, the provision for local variables is  rather  clumsy:  They
       are  declared as extra parameters in the parameter list.  The convention is to separate local variables from real parame‐
       ters by extra spaces in the parameter list.  For example:

              function  f(p, q,     a, b)   # a and b are local
              {
                   ...
              }

              /abc/     { ... ; f(1, 2) ; ... }

       The left parenthesis in a function call is required to immediately follow the  function  name,  without  any  intervening
       whitespace.   This  avoids a syntactic ambiguity with the concatenation operator.  This restriction does not apply to the
       built-in functions listed above.

       Functions may call each other and may be recursive.  Function parameters used as local variables are initialized  to  the
       null string and the number zero upon function invocation.

       Use  return  expr  to  return  a value from a function.  The return value is undefined if no value is provided, or if the
       function returns by “falling off” the end.

       As a gawk extension, functions may be called indirectly. To do this, assign the name of the function to be called,  as  a
       string, to a variable.  Then use the variable as if it were the name of a function, prefixed with an @ sign, like so:
              function  myfunc()
              {
                   print "myfunc called"
                   ...
              }

              {    ...
                   the_func = "myfunc"
                   @the_func()    # call through the_func to myfunc
                   ...
              }

       If  --lint has been provided, gawk warns about calls to undefined functions at parse time, instead of at run time.  Call‐
       ing an undefined function at run time is a fatal error.

       The word func may be used in place of function.

DYNAMICALLY LOADING NEW FUNCTIONS
       You can dynamically add new built-in functions to the running gawk interpreter.  The full details are beyond the scope of
       this manual page; see GAWK: Effective AWK Programming for the details.

       extension(object, function)
               Dynamically  link the shared object file named by object, and invoke function in that object, to perform initial‐
               ization.  These should both be provided as strings.  Return the value returned by function.

       Using this feature at the C level is not pretty, but it is unlikely to go away. Additional mechanisms  may  be  added  at
       some point.

SIGNALS
       pgawk  accepts  two  signals.   SIGUSR1 causes it to dump a profile and function call stack to the profile file, which is
       either awkprof.out, or whatever file was named with the --profile option.  It then continues to run.  SIGHUP causes pgawk
       to dump the profile and function call stack and then exit.

INTERNATIONALIZATION
       String constants are sequences of characters enclosed in double quotes.  In non-English speaking environments, it is pos‐
       sible to mark strings in the AWK program as requiring translation to the local natural language. Such strings are  marked
       in the AWK program with a leading underscore (“_”).  For example,

              gawk 'BEGIN { print "hello, world" }'

       always prints hello, world.  But,

              gawk 'BEGIN { print _"hello, world" }'

       might print bonjour, monde in France.

       There are several steps involved in producing and running a localizable AWK program.

       1.  Add a BEGIN action to assign a value to the TEXTDOMAIN variable to set the text domain to a name associated with your
           program:

           BEGIN { TEXTDOMAIN = "myprog" }

       This allows gawk to find the .mo file associated with your program.  Without this  step,  gawk  uses  the  messages  text
       domain, which likely does not contain translations for your program.

       2.  Mark all strings that should be translated with leading underscores.

       3.  If necessary, use the dcgettext() and/or bindtextdomain() functions in your program, as appropriate.

       4.  Run gawk --gen-pot -f myprog.awk > myprog.pot to generate a .po file for your program.

       5.  Provide appropriate translations, and build and install the corresponding .mo files.

       The internationalization features are described in full detail in GAWK: Effective AWK Programming.

POSIX COMPATIBILITY
       A  primary  goal  for  gawk is compatibility with the POSIX standard, as well as with the latest version of UNIX awk.  To
       this end, gawk incorporates the following user visible features which are not described in the AWK book, but are part  of
       the Bell Laboratories version of awk, and are in the POSIX standard.

       The  book  indicates  that command line variable assignment happens when awk would otherwise open the argument as a file,
       which is after the BEGIN block is executed.  However, in earlier implementations, when such an assignment appeared before
       any  file  names,  the assignment would happen before the BEGIN block was run.  Applications came to depend on this “fea‐
       ture.”  When awk was changed to match its documentation, the -v option for assigning variables before  program  execution
       was  added  to  accommodate  applications that depended upon the old behavior.  (This feature was agreed upon by both the
       Bell Laboratories and the GNU developers.)

       When processing arguments, gawk uses the special option “--” to signal the end of arguments.  In compatibility  mode,  it
       warns  about  but otherwise ignores undefined options.  In normal operation, such arguments are passed on to the AWK pro‐
       gram for it to process.

       The AWK book does not define the return value of srand().  The POSIX standard has it return the seed  it  was  using,  to
       allow keeping track of random number sequences.  Therefore srand() in gawk also returns its current seed.

       Other new features are: The use of multiple -f options (from MKS awk); the ENVIRON array; the \a, and \v escape sequences
       (done originally in gawk and fed back into the Bell Laboratories version); the tolower() and toupper() built-in functions
       (from  the Bell Laboratories version); and the ANSI C conversion specifications in printf (done first in the Bell Labora‐
       tories version).

HISTORICAL FEATURES
       There is one feature of historical AWK implementations that gawk supports: It is possible to call the  length()  built-in
       function not only with no argument, but even without parentheses!  Thus,

              a = length     # Holy Algol 60, Batman!

       is the same as either of

              a = length()
              a = length($0)

       Using this feature is poor practice, and gawk issues a warning about its use if --lint is specified on the command line.

GNU EXTENSIONS
       Gawk has a number of extensions to POSIX awk.  They are described in this section.  All the extensions described here can
       be disabled by invoking gawk with the --traditional or --posix options.

       The following features of gawk are not available in POSIX awk.

       · No path search is performed for files named via the -f option.  Therefore the AWKPATH environment variable is not  spe‐
         cial.

       · There is no facility for doing file inclusion (gawk's @include mechanism).

       · The \x escape sequence.  (Disabled with --posix.)

       · The ability to continue lines after ?  and :.  (Disabled with --posix.)

       · Octal and hexadecimal constants in AWK programs.

       · The ARGIND, BINMODE, ERRNO, LINT, RT and TEXTDOMAIN variables are not special.

       · The IGNORECASE variable and its side-effects are not available.

       · The FIELDWIDTHS variable and fixed-width field splitting.

       · The FPAT variable and field splitting based on field values.

       · The PROCINFO array is not available.

       · The use of RS as a regular expression.

       · The special file names available for I/O redirection are not recognized.

       · The |& operator for creating co-processes.

       · The BEGINFILE and ENDFILE special patterns are not available.

       · The  ability  to split out individual characters using the null string as the value of FS, and as the third argument to
         split().

       · An optional fourth argument to split() to receive the separator texts.

       · The optional second argument to the close() function.

       · The optional third argument to the match() function.

       · The ability to use positional specifiers with printf and sprintf().

       · The ability to pass an array to length().

       · The use of delete array to delete the entire contents of an array.

       · The use of nextfile to abandon processing of the current input file.

       · The and(), asort(), asorti(), bindtextdomain(), compl(), dcgettext(), dcngettext(), gensub(), lshift(), mktime(), or(),
         patsplit(), rshift(), strftime(), strtonum(), systime() and xor() functions.

       · Localizable strings.

       · Adding new built-in functions dynamically with the extension() function.

       The  AWK book does not define the return value of the close() function.  Gawk's close() returns the value from fclose(3),
       or pclose(3), when closing an output file or pipe, respectively.  It returns the process's exit status  when  closing  an
       input pipe.  The return value is -1 if the named file, pipe or co-process was not opened with a redirection.

       When gawk is invoked with the --traditional option, if the fs argument to the -F option is “t”, then FS is set to the tab
       character.  Note that typing gawk -F\t ...  simply causes the shell to quote the “t,” and does not pass “\t”  to  the  -F
       option.   Since this is a rather ugly special case, it is not the default behavior.  This behavior also does not occur if
       --posix has been specified.  To really get a tab character as the field separator, it is best to use single quotes:  gawk
       -F'\t' ....

ENVIRONMENT VARIABLES
       The  AWKPATH  environment variable can be used to provide a list of directories that gawk searches when looking for files
       named via the -f and --file options.

       For  socket  communication,  two  special  environment  variables  can  be  used  to  control  the  number   of   retries
       (GAWK_SOCK_RETRIES),  and  the  interval  between retries (GAWK_MSEC_SLEEP).  The interval is in milliseconds. On systems
       that do not support usleep(3), the value is rounded up to an integral number of seconds.

       If POSIXLY_CORRECT exists in the environment, then gawk behaves exactly as if --posix had been specified on  the  command
       line.  If --lint has been specified, gawk issues a warning message to this effect.

EXIT STATUS
       If the exit statement is used with a value, then gawk exits with the numeric value given to it.

       Otherwise, if there were no problems during execution, gawk exits with the value of the C constant EXIT_SUCCESS.  This is
       usually zero.

       If an error occurs, gawk exits with the value of the C constant EXIT_FAILURE.  This is usually one.

       If gawk exits because of a fatal error, the exit status is 2.   On  non-POSIX  systems,  this  value  may  be  mapped  to
       EXIT_FAILURE.

VERSION INFORMATION
       This man page documents gawk, version 4.0.

AUTHORS
       The  original  version  of  UNIX awk was designed and implemented by Alfred Aho, Peter Weinberger, and Brian Kernighan of
       Bell Laboratories.  Brian Kernighan continues to maintain and enhance it.

       Paul Rubin and Jay Fenlason, of the Free Software Foundation, wrote gawk, to be compatible with the original  version  of
       awk  distributed  in  Seventh Edition UNIX.  John Woods contributed a number of bug fixes.  David Trueman, with contribu‐
       tions from Arnold Robbins, made gawk compatible with the new version of UNIX awk.  Arnold Robbins is  the  current  main‐
       tainer.

       The initial DOS port was done by Conrad Kwok and Scott Garfinkle.  Scott Deifik maintains the port to MS-DOS using DJGPP.
       Eli Zaretskii maintains the port to MS-Windows using MinGW.  Pat Rankin did the port to VMS, and  Michal  Jaegermann  did
       the  port  to the Atari ST.  The port to OS/2 was done by Kai Uwe Rommel, with contributions and help from Darrel Hanker‐
       son.  Andreas Buening now maintains the OS/2 port.  The late Fred Fish supplied support for the Amiga, and  Martin  Brown
       provided  the BeOS port.  Stephen Davies provided the original Tandem port, and Matthew Woehlke provided changes for Tan‐
       dem's POSIX-compliant systems.  Dave Pitts provided the port to z/OS.

       See the README file in the gawk distribution for up-to-date information about maintainers and which ports  are  currently
       supported.

BUG REPORTS
       If you find a bug in gawk, please send electronic mail to bug-gawk@gnu.org.  Please include your operating system and its
       revision, the version of gawk (from gawk --version), which C compiler you used to compile it, and a test program and data
       that are as small as possible for reproducing the problem.

       Before  sending  a  bug  report, please do the following things.  First, verify that you have the latest version of gawk.
       Many bugs (usually subtle ones) are fixed at each release, and if yours is out of date, the problem may already have been
       solved.  Second, please see if setting the environment variable LC_ALL to LC_ALL=C causes things to behave as you expect.
       If so, it's a locale issue, and may or may not really be a bug.  Finally, please read this man  page  and  the  reference
       manual carefully to be sure that what you think is a bug really is, instead of just a quirk in the language.

       Whatever  you do, do NOT post a bug report in comp.lang.awk.  While the gawk developers occasionally read this newsgroup,
       posting bug reports there is an unreliable way to report bugs.  Instead, please use the electronic mail  addresses  given
       above.

       If  you're using a GNU/Linux or BSD-based system, you may wish to submit a bug report to the vendor of your distribution.
       That's fine, but please send a copy to the official email address as well, since there's no guarantee that the bug report
       will be forwarded to the gawk maintainer.

BUGS
       The -F option is not necessary given the command line variable assignment feature; it remains only for backwards compati‐
       bility.

       Syntactically invalid single character programs tend to overflow the parse stack, generating a rather unhelpful  message.
       Such  programs  are  surprisingly difficult to diagnose in the completely general case, and the effort to do so really is
       not worth it.

SEE ALSO
       egrep(1), getpid(2), getppid(2), getpgrp(2), getuid(2), geteuid(2), getgid(2), getegid(2), getgroups(2), usleep(3)

       The AWK Programming Language, Alfred V. Aho, Brian  W.  Kernighan,  Peter  J.  Weinberger,  Addison-Wesley,  1988.   ISBN
       0-201-07981-X.

       GAWK:  Effective  AWK  Programming,  Edition  4.0, shipped with the gawk source.  The current version of this document is
       available online at http://www.gnu.org/software/gawk/manual.

EXAMPLES
       Print and sort the login names of all users:

            BEGIN     { FS = ":" }
                 { print $1 | "sort" }

       Count lines in a file:

                 { nlines++ }
            END  { print nlines }

       Precede each line by its number in the file:

            { print FNR, $0 }

       Concatenate and line number (a variation on a theme):

            { print NR, $0 }

       Run an external command for particular lines of data:

            tail -f access_log |
            awk '/myhome.html/ { system("nmap " $1 ">> logdir/myhome.html") }'

ACKNOWLEDGEMENTS
       Brian Kernighan of Bell Laboratories provided valuable assistance during testing and debugging.  We thank him.

COPYING PERMISSIONS
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2007,  2009,  2010,
       2011 Free Software Foundation, Inc.

       Permission  is  granted to make and distribute verbatim copies of this manual page provided the copyright notice and this
       permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page  under  the  conditions  for  verbatim
       copying,  provided that the entire resulting derived work is distributed under the terms of a permission notice identical
       to this one.

       Permission is granted to copy and distribute translations of this manual page into another language, under the above con‐
       ditions  for modified versions, except that this permission notice may be stated in a translation approved by the Founda‐
       tion.



Free Software Foundation                                   Dec 07 2012                                                   GAWK(1)
CAT(1)                                                    User Commands                                                   CAT(1)



NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

       GNU  coreutils  online help: <http://www.gnu.org/software/coreutils/> Report cat translation bugs to <http://translation‐
       project.org/team/>

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

COPYRIGHT
       Copyright   ©   2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tac(1)

       The full documentation for cat is maintained as a Texinfo manual.  If the info and cat programs are properly installed at
       your site, the command

              info coreutils 'cat invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                   CAT(1)
CHMOD(1)                                                  User Commands                                                 CHMOD(1)



NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page  documents the GNU version of chmod.  chmod changes the file mode bits of each given file according to
       mode, which can be either a symbolic representation of changes to make, or an octal number representing the  bit  pattern
       for the new mode bits.

       The  format  of a symbolic mode is [ugoa...][[+-=][perms...]...], where perms is either zero or more letters from the set
       rwxXst, or a single letter from the set ugo.  Multiple symbolic modes can be given, separated by commas.

       A combination of the letters ugoa controls which users' access to the file will be changed: the user  who  owns  it  (u),
       other  users  in  the  file's group (g), other users not in the file's group (o), or all users (a).  If none of these are
       given, the effect is as if a were given, but bits that are set in the umask are not affected.

       The operator + causes the selected file mode bits to be added to the existing file mode bits of each file; - causes  them
       to  be  removed; and = causes them to be added and causes unmentioned bits to be removed except that a directory's unmen‐
       tioned set user and group ID bits are not affected.

       The letters rwxXst select file mode bits for the affected users: read (r), write (w), execute (or search for directories)
       (x),  execute/search  only  if  the  file is a directory or already has execute permission for some user (X), set user or
       group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead of one or more of these letters, you  can
       specify  exactly  one  of  the  letters  ugo:  the permissions granted to the user who owns the file (u), the permissions
       granted to other users who are members of the file's group (g), and the permissions granted to users that are in  neither
       of the two preceding categories (o).

       A  numeric  mode  is from one to four octal digits (0-7), derived by adding up the bits with values 4, 2, and 1.  Omitted
       digits are assumed to be leading zeros.  The first digit selects the set user ID (4) and set group ID (2) and  restricted
       deletion  or sticky (1) attributes.  The second digit selects permissions for the user who owns the file: read (4), write
       (2), and execute (1); the third selects permissions for other users in the file's group, with the same  values;  and  the
       fourth for other users not in the file's group, with the same values.

       chmod  never  changes  the permissions of symbolic links; the chmod system call cannot change their permissions.  This is
       not a problem since the permissions of symbolic links are never used.  However, for each symbolic link listed on the com‐
       mand  line,  chmod changes the permissions of the pointed-to file.  In contrast, chmod ignores symbolic links encountered
       during recursive directory traversals.

SETUID AND SETGID BITS
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effective  group  ID
       or  one  of  the user's supplementary group IDs, unless the user has appropriate privileges.  Additional restrictions may
       cause the set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.  This behavior  depends  on  the  policy  and
       functionality of the underlying chmod system call.  When in doubt, check the underlying system behavior.

       chmod  preserves a directory's set-user-ID and set-group-ID bits unless you explicitly specify otherwise.  You can set or
       clear the bits with symbolic modes like u+s and g-s, and you can set (but not clear) the bits with a numeric mode.

RESTRICTED DELETION FLAG OR STICKY BIT
       The restricted deletion flag or sticky bit is a single bit, whose interpretation depends on the file type.  For  directo‐
       ries,  it  prevents  unprivileged users from removing or renaming a file in the directory unless they own the file or the
       directory; this is called the restricted deletion flag for the directory, and is commonly found on world-writable  direc‐
       tories  like /tmp.  For regular files on some older systems, the bit saves the program's text image on the swap device so
       it will load more quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.  With --reference, change the mode of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report chmod translation bugs to <http://translation‐
       project.org/team/>

AUTHOR
       Written by David MacKenzie and Jim Meyering.

COPYRIGHT
       Copyright    ©    2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       chmod(2)

       The full documentation for chmod is maintained as a Texinfo  manual.   If  the  info  and  chmod  programs  are  properly
       installed at your site, the command

              info coreutils 'chmod invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                 CHMOD(1)
MAN(1)                                                 Manual pager utils                                                 MAN(1)



NAME
       man - an interface to the on-line reference manuals

SYNOPSIS
       man  [-C  file]  [-d]  [-D]  [--warnings[=warnings]]  [-R encoding] [-L locale] [-m system[,...]] [-M path] [-S list] [-e
       extension] [-i|-I] [--regex|--wildcard] [--names-only] [-a] [-u] [--no-subpages] [-P pager] [-r prompt] [-7]  [-E  encod‐
       ing]  [--no-hyphenation]  [--no-justification]  [-p  string]  [-t]  [-T[device]]  [-H[browser]] [-X[dpi]] [-Z] [[section]
       page ...] ...
       man -k [apropos options] regexp ...
       man -K [-w|-W] [-S list] [-i|-I] [--regex] [section] term ...
       man -f [whatis options] page ...
       man -l [-C file] [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-P pager] [-r prompt]  [-7]  [-E  encoding]
       [-p string] [-t] [-T[device]] [-H[browser]] [-X[dpi]] [-Z] file ...
       man -w|-W [-C file] [-d] [-D] page ...
       man -c [-C file] [-d] [-D] page ...
       man [-?V]

DESCRIPTION
       man is the system's manual pager. Each page argument given to man is normally the name of a program, utility or function.
       The manual page associated with each of these arguments is then found and displayed. A section, if provided, will  direct
       man  to  look only in that section of the manual.  The default action is to search in all of the available sections, fol‐
       lowing a pre-defined order and to show only the first page found, even if page exists in several sections.

       The table below shows the section numbers of the manual followed by the types of pages they contain.


       1   Executable programs or shell commands
       2   System calls (functions provided by the kernel)
       3   Library calls (functions within program libraries)
       4   Special files (usually found in /dev)
       5   File formats and conventions eg /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
       8   System administration commands (usually only for root)
       9   Kernel routines [Non standard]

       A manual page consists of several sections.

       Conventional section names include  NAME,  SYNOPSIS,  CONFIGURATION,  DESCRIPTION,  OPTIONS,  EXIT STATUS,  RETURN VALUE,
       ERRORS, ENVIRONMENT, FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.

       The following conventions apply to the SYNOPSIS section and can be used as a guide in other sections.


       bold text          type exactly as shown.
       italic text        replace with appropriate argument.
       [-abc]             any or all arguments within [ ] are optional.
       -a|-b              options delimited by | cannot be used together.
       argument ...       argument is repeatable.
       [expression] ...   entire expression within [ ] is repeatable.

       Exact  rendering  may  vary depending on the output device.  For instance, man will usually not be able to render italics
       when running in a terminal, and will typically use underlined or coloured text instead.

       The command or function illustration is a pattern that should match all possible invocations.  In some cases it is advis‐
       able to illustrate several exclusive invocations as is shown in the SYNOPSIS section of this manual page.

EXAMPLES
       man ls
           Display the manual page for the item (program) ls.

       man -a intro
           Display,  in succession, all of the available intro manual pages contained within the manual.  It is possible to quit
           between successive displays or skip any of them.

       man -t alias | lpr -Pps
           Format the manual page referenced by `alias', usually a shell manual page, into the default troff or groff format and
           pipe it to the printer named ps.  The default output for groff is usually PostScript.  man --help should advise as to
           which processor is bound to the -t option.

       man -l -Tdvi ./foo.1x.gz > ./foo.1x.dvi
           This command will decompress and format the nroff source manual page ./foo.1x.gz  into  a  device  independent  (dvi)
           file.   The redirection is necessary as the -T flag causes output to be directed to stdout with no pager.  The output
           could be viewed with a program such as xdvi or further processed into PostScript using a program such as dvips.

       man -k printf
           Search the short descriptions and manual page names for the keyword printf as  regular  expression.   Print  out  any
           matches.  Equivalent to apropos -r printf.

       man -f smail
           Lookup  the  manual  pages  referenced  by  smail  and  print out the short descriptions of any found.  Equivalent to
           whatis -r smail.

OVERVIEW
       Many options are available to man in order to give as much flexibility as possible to the user.  Changes can be  made  to
       the search path, section order, output processor, and other behaviours and operations detailed below.

       If  set,  various  environment  variables  are interrogated to determine the operation of man.  It is possible to set the
       `catch all' variable $MANOPT to any string in command line format with the exception that any spaces used as part  of  an
       option's  argument  must  be  escaped (preceded by a backslash).  man will parse $MANOPT prior to parsing its own command
       line.  Those options requiring an argument will be overridden by the same options found on the command  line.   To  reset
       all  of the options set in $MANOPT, -D can be specified as the initial command line option.  This will allow man to `for‐
       get' about the options specified in $MANOPT although they must still have been valid.

       The manual pager utilities packaged as man-db make extensive use of index database caches.  These caches contain informa‐
       tion such as where each manual page can be found on the filesystem and what its whatis (short one line description of the
       man page) contains, and allow man to run faster than if it had to search the filesystem each time to find the appropriate
       manual  page.  If requested using the -u option, man will ensure that the caches remain consistent, which can obviate the
       need to manually run software to update traditional whatis text databases.

       If man cannot find a mandb initiated index database for a particular manual page hierarchy, it will still search for  the
       requested  manual  pages, although file globbing will be necessary to search within that hierarchy.  If whatis or apropos
       fails to find an index it will try to extract information from a traditional whatis database instead.

       These utilities support compressed source nroff files having, by default, the extensions of .Z, .z and .gz.  It is possi‐
       ble  to  deal  with any compression extension, but this information must be known at compile time.  Also, by default, any
       cat pages produced  are  compressed  using  gzip.   Each  `global'  manual  page  hierarchy  such  as  /usr/share/man  or
       /usr/X11R6/man  may  have any directory as its cat page hierarchy.  Traditionally the cat pages are stored under the same
       hierarchy as the man pages, but for reasons such as those specified in the File Hierarchy Standard (FHS), it may be  bet‐
       ter to store them elsewhere.  For details on how to do this, please read manpath(5).  For details on why to do this, read
       the standard.

       International support is available with this package.  Native language manual pages are accessible (if available on  your
       system)  via  use  of  locale  functions.  To activate such support, it is necessary to set either $LC_MESSAGES, $LANG or
       another system dependent environment variable to your language locale, usually specified in the POSIX 1003.1  based  for‐
       mat:

       <language>[_<territory>[.<character-set>[,<version>]]]

       If  the desired page is available in your locale, it will be displayed in lieu of the standard (usually American English)
       page.

       Support for international message catalogues is also featured in this package and can be activated in the same way, again
       if  available.   If you find that the manual pages and message catalogues supplied with this package are not available in
       your native language and you would like to supply them, please contact the  maintainer  who  will  be  coordinating  such
       activity.

       For  information regarding other features and extensions available with this manual pager, please read the documents sup‐
       plied with the package.

DEFAULTS
       man will search for the desired manual pages within the index database caches. If the -u option is given, a cache consis‐
       tency  check  is performed to ensure the databases accurately reflect the filesystem.  If this option is always given, it
       is not generally necessary to run mandb after the caches are initially created, unless a cache becomes corrupt.  However,
       the  cache  consistency check can be slow on systems with many manual pages installed, so it is not performed by default,
       and system administrators may wish to run mandb every week or so to keep the database caches fresh.  To  forestall  prob‐
       lems caused by outdated caches, man will fall back to file globbing if a cache lookup fails, just as it would if no cache
       was present.

       Once a manual page has been located, a check is performed to find out if  a  relative  preformatted  `cat'  file  already
       exists  and  is  newer than the nroff file.  If it does and is, this preformatted file is (usually) decompressed and then
       displayed, via use of a pager.  The pager can be specified in a number of ways, or else will fall back to  a  default  is
       used (see option -P for details).  If no cat is found or is older than the nroff file, the nroff is filtered through var‐
       ious programs and is shown immediately.

       If a cat file can be produced (a relative cat directory exists and has appropriate permissions), man  will  compress  and
       store the cat file in the background.

       The  filters  are  deciphered by a number of means. Firstly, the command line option -p or the environment variable $MAN‐
       ROFFSEQ is interrogated. If -p was not used and the environment variable was not set, the initial line of the nroff  file
       is parsed for a preprocessor string.  To contain a valid preprocessor string, the first line must resemble

       '\" <string>

       where string can be any combination of letters described by option -p below.

       If none of the above methods provide any filter information, a default set is used.

       A  formatting  pipeline  is  formed  from the filters and the primary formatter (nroff or [tg]roff with -t) and executed.
       Alternatively, if an executable program mandb_nfmt (or mandb_tfmt with -t) exists in the man tree root,  it  is  executed
       instead.   It gets passed the manual source file, the preprocessor string, and optionally the device specified with -T or
       -E as arguments.

OPTIONS
       Non argument options that are duplicated either on the command line, in $MANOPT, or both, are not harmful.   For  options
       that require an argument, each duplication will override the previous argument value.

   General options
       -C file, --config-file=file
              Use this user configuration file rather than the default of ~/.manpath.

       -d, --debug
              Print debugging information.

       -D, --default
              This  option is normally issued as the very first option and resets man's behaviour to its default.  Its use is to
              reset those options that may have been set in $MANOPT.  Any options that follow -D will have their usual effect.

       --warnings[=warnings]
              Enable warnings from groff.  This may be used to perform sanity checks on the source text of manual pages.   warn‐
              ings  is a comma-separated list of warning names; if it is not supplied, the default is "mac".  See the “Warnings”
              node in info groff for a list of available warning names.

   Main modes of operation
       -f, --whatis
              Equivalent to whatis.  Display a short description from the manual page, if available. See whatis(1) for details.

       -k, --apropos
              Equivalent to apropos.  Search the short manual page descriptions for keywords and display any matches.  See apro‐
              pos(1) for details.

       -K, --global-apropos
              Search  for  text in all manual pages.  This is a brute-force search, and is likely to take some time; if you can,
              you should specify a section to reduce the number of pages that need to be searched.  Search terms may  be  simple
              strings (the default), or regular expressions if the --regex option is used.

       -l, --local-file
              Activate  `local'  mode.   Format  and display local manual files instead of searching through the system's manual
              collection.  Each manual page argument will be interpreted as an nroff source file in the correct format.  No  cat
              file  is produced.  If '-' is listed as one of the arguments, input will be taken from stdin.  When this option is
              not used, and man fails to find the page required, before displaying the error message, it attempts to act  as  if
              this option was supplied, using the name as a filename and looking for an exact match.

       -w, --where, --path, --location
              Don't actually display the manual pages, but do print the location(s) of the source nroff files that would be for‐
              matted.

       -W, --where-cat, --location-cat
              Don't actually display the manual pages, but do print the location(s) of the cat files that  would  be  displayed.
              If -w and -W are both specified, print both separated by a space.

       -c, --catman
              This option is not for general use and should only be used by the catman program.

       -R encoding, --recode=encoding
              Instead of formatting the manual page in the usual way, output its source converted to the specified encoding.  If
              you already know the encoding of the source file, you can also use  manconv(1)  directly.   However,  this  option
              allows you to convert several manual pages to a single encoding without having to explicitly state the encoding of
              each, provided that they were already installed in a structure similar to a manual page hierarchy.

   Finding manual pages
       -L locale, --locale=locale
              man will normally determine your current locale by a call to the C function setlocale(3) which interrogates  vari‐
              ous  environment  variables,  possibly  including  $LC_MESSAGES and $LANG.  To temporarily override the determined
              value, use this option to supply a locale string directly to man.  Note that it will not  take  effect  until  the
              search  for  pages  actually  begins.   Output  such as the help message will always be displayed in the initially
              determined locale.

       -m system[,...], --systems=system[,...]
              If this system has access to other operating system's manual pages, they can be accessed using  this  option.   To
              search for a manual page from NewOS's manual page collection, use the option -m NewOS.

              The  system  specified can be a combination of comma delimited operating system names.  To include a search of the
              native operating system's manual pages, include the system name man in the  argument  string.   This  option  will
              override the $SYSTEM environment variable.

       -M path, --manpath=path
              Specify  an  alternate manpath to use.  By default, man uses manpath derived code to determine the path to search.
              This option overrides the $MANPATH environment variable and causes option -m to be ignored.

              A path specified as a manpath must be the root of a manual page hierarchy structured into sections as described in
              the  man-db  manual  (under  "The manual page system").  To view manual pages outside such hierarchies, see the -l
              option.

       -S list, -s list, --sections=list
              List is a colon- or comma-separated list of `order specific' manual sections to search.  This option overrides the
              $MANSECT environment variable.  (The -s spelling is for compatibility with System V.)

       -e sub-extension, --extension=sub-extension
              Some  systems  incorporate  large packages of manual pages, such as those that accompany the Tcl package, into the
              main manual page hierarchy.  To get around the problem of having two manual pages  with  the  same  name  such  as
              exit(3),  the Tcl pages were usually all assigned to section l.  As this is unfortunate, it is now possible to put
              the pages in the correct section, and to assign a specific `extension' to them, in this case,  exit(3tcl).   Under
              normal  operation, man will display exit(3) in preference to exit(3tcl).  To negotiate this situation and to avoid
              having to know which section the page you require resides in, it is now  possible  to  give  man  a  sub-extension
              string  indicating which package the page must belong to.  Using the above example, supplying the option -e tcl to
              man will restrict the search to pages having an extension of *tcl.

       -i, --ignore-case
              Ignore case when searching for manual pages.  This is the default.

       -I, --match-case
              Search for manual pages case-sensitively.

       --regex
              Show all pages with any part of either their names or their descriptions matching each page argument as a  regular
              expression, as with apropos(1).  Since there is usually no reasonable way to pick a "best" page when searching for
              a regular expression, this option implies -a.

       --wildcard
              Show all pages with any part of either their names or their descriptions matching each page argument using  shell-
              style  wildcards,  as with apropos(1) --wildcard.  The page argument must match the entire name or description, or
              match on word boundaries in the description.  Since there is usually no reasonable way to pick a "best" page  when
              searching for a wildcard, this option implies -a.

       --names-only
              If  the  --regex  or  --wildcard  option is used, match only page names, not page descriptions, as with whatis(1).
              Otherwise, no effect.

       -a, --all
              By default, man will exit after displaying the most suitable manual page it finds.  Using this option  forces  man
              to display all the manual pages with names that match the search criteria.

       -u, --update
              This  option  causes  man to perform an `inode level' consistency check on its database caches to ensure that they
              are an accurate representation of the filesystem.  It will only have a useful effect if man is installed with  the
              setuid bit set.

       --no-subpages
              By default, man will try to interpret pairs of manual page names given on the command line as equivalent to a sin‐
              gle manual page name containing a hyphen or an underscore.  This supports the  common  pattern  of  programs  that
              implement a number of subcommands, allowing them to provide manual pages for each that can be accessed using simi‐
              lar syntax as would be used to invoke the subcommands themselves.  For example:

                $ man -aw git diff
                /usr/share/man/man1/git-diff.1.gz

              To disable this behaviour, use the --no-subpages option.

                $ man -aw --no-subpages git diff
                /usr/share/man/man1/git.1.gz
                /usr/share/man/man3/Git.3pm.gz
                /usr/share/man/man1/diff.1.gz

   Controlling formatted output
       -P pager, --pager=pager
              Specify which output pager to use.  By default, man uses less -s.  This option overrides the $MANPAGER environment
              variable, which in turn overrides the $PAGER environment variable.  It is not used in conjunction with -f or -k.

              The value may be a simple command name or a command with arguments, and may use shell quoting (backslashes, single
              quotes, or double quotes).  It may not use pipes to connect multiple commands; if you need  that,  use  a  wrapper
              script, which may take the file to display either as an argument or on standard input.

       -r prompt, --prompt=prompt
              If  a  recent  version of less is used as the pager, man will attempt to set its prompt and some sensible options.
              The default prompt looks like

               Manual page name(sec) line x

              where name denotes the manual page name, sec denotes the section it was found under and x the current line number.
              This is achieved by using the $LESS environment variable.

              Supplying  -r  with  a  string  will override this default.  The string may contain the text $MAN_PN which will be
              expanded to the name of the current manual page and its section name surrounded by `(' and `)'.  The  string  used
              to produce the default could be expressed as

              \ Manual\ page\ \$MAN_PN\ ?ltline\ %lt?L/%L.:
              byte\ %bB?s/%s..?\ (END):?pB\ %pB\\%..
              (press h for help or q to quit)

              It is broken into three lines here for the sake of readability only.  For its meaning see the less(1) manual page.
              The prompt string is first evaluated by the shell.  All double quotes, back-quotes and backslashes in  the  prompt
              must be escaped by a preceding backslash.  The prompt string may end in an escaped $ which may be followed by fur‐
              ther options for less.  By default man sets the -ix8 options.

              If you want to override man's prompt string processing completely, use the $MANLESS environment variable described
              below.

       -7, --ascii
              When viewing a pure ascii(7) manual page on a 7 bit terminal or terminal emulator, some characters may not display
              correctly when using the latin1(7) device description with GNU nroff.  This option allows pure ascii manual  pages
              to  be  displayed  in  ascii  with the latin1 device.  It will not translate any latin1 text.  The following table
              shows the translations performed: some parts of it may only be displayed properly when using GNU nroff's latin1(7)
              device.


              Description           Octal   latin1   ascii
              ─────────────────────────────────────────────
              continuation hyphen    255      ‐        -
              bullet (middle dot)    267      ·        o
              acute accent           264      ´        '
              multiplication sign    327      ×        x

              If  the latin1 column displays correctly, your terminal may be set up for latin1 characters and this option is not
              necessary.  If the latin1 and ascii columns are identical, you are reading this page using this option or man  did
              not  format  this  page  using the latin1 device description.  If the latin1 column is missing or corrupt, you may
              need to view manual pages with this option.

              This option is ignored when using options -t, -H, -T, or -Z and may be useless for nroff other than GNU's.

       -E encoding, --encoding=encoding
              Generate output for a character encoding other than the default.  For backward compatibility, encoding may  be  an
              nroff device such as ascii, latin1, or utf8 as well as a true character encoding such as UTF-8.

       --no-hyphenation, --nh
              Normally,  nroff will automatically hyphenate text at line breaks even in words that do not contain hyphens, if it
              is necessary to do so to lay out words on a line  without  excessive  spacing.   This  option  disables  automatic
              hyphenation, so words will only be hyphenated if they already contain hyphens.

              If  you  are  writing  a  manual page and simply want to prevent nroff from hyphenating a word at an inappropriate
              point, do not use this option, but consult the nroff documentation instead; for instance, you can put "\%"  inside
              a  word to indicate that it may be hyphenated at that point, or put "\%" at the start of a word to prevent it from
              being hyphenated.

       --no-justification, --nj
              Normally, nroff will automatically justify text to both margins.  This option disables full justification, leaving
              justified only to the left margin, sometimes called "ragged-right" text.

              If  you  are writing a manual page and simply want to prevent nroff from justifying certain paragraphs, do not use
              this option, but consult the nroff documentation instead; for instance, you can use the ".na", ".nf",  ".fi",  and
              ".ad" requests to temporarily disable adjusting and filling.

       -p string, --preprocessor=string
              Specify  the sequence of preprocessors to run before nroff or troff/groff.  Not all installations will have a full
              set of preprocessors.  Some of the preprocessors and the letters used to designate them are: eqn  (e),  grap  (g),
              pic  (p), tbl (t), vgrind (v), refer (r).  This option overrides the $MANROFFSEQ environment variable.  zsoelim is
              always run as the very first preprocessor.

       -t, --troff
              Use groff -mandoc to format the manual page to stdout.  This option is not required in conjunction with -H, -T, or
              -Z.

       -T[device], --troff-device[=device]
              This  option  is  used  to  change  groff  (or possibly troff's) output to be suitable for a device other than the
              default.  It implies -t.  Examples (provided with Groff-1.17) include dvi, latin1, ps, utf8, X75 and X100.

       -H[browser], --html[=browser]
              This option will cause groff to produce HTML output, and will display that output in a web browser.  The choice of
              browser  is  determined by the optional browser argument if one is provided, by the $BROWSER environment variable,
              or by a compile-time default if that is unset (usually lynx).  This option implies -t, and will only work with GNU
              troff.

       -X[dpi], --gxditview[=dpi]
              This  option  displays  the  output of groff in a graphical window using the gxditview program.  The dpi (dots per
              inch) may be 75, 75-12, 100, or 100-12, defaulting to 75; the -12 variants use a 12-point base font.  This  option
              implies -T with the X75, X75-12, X100, or X100-12 device respectively.

       -Z, --ditroff
              groff  will run troff and then use an appropriate post-processor to produce output suitable for the chosen device.
              If groff -mandoc is groff, this option is passed to groff and will suppress  the  use  of  a  post-processor.   It
              implies -t.

   Getting help
       -?, --help
              Print a help message and exit.

       --usage
              Print a short usage message and exit.

       -V, --version
              Display version information.

EXIT STATUS
       0      Successful program execution.

       1      Usage, syntax or configuration file error.

       2      Operational error.

       3      A child process returned a non-zero exit status.

       16     At least one of the pages/files/keywords didn't exist or wasn't matched.

ENVIRONMENT
       MANPATH
              If $MANPATH is set, its value is used as the path to search for manual pages.

       MANROFFOPT
              The  contents  of $MANROFFOPT are added to the command line every time man invokes the formatter (nroff, troff, or
              groff).

       MANROFFSEQ
              If $MANROFFSEQ is set, its value is used to determine the set of preprocessors to pass each manual  page  through.
              The default preprocessor list is system dependent.

       MANSECT
              If  $MANSECT is set, its value is a colon-delimited list of sections and it is used to determine which manual sec‐
              tions to search and in what order.

       MANPAGER, PAGER
              If $MANPAGER or $PAGER is set ($MANPAGER is used in preference), its value is used as the name of the program used
              to display the manual page.  By default, less -s is used.

              The value may be a simple command name or a command with arguments, and may use shell quoting (backslashes, single
              quotes, or double quotes).  It may not use pipes to connect multiple commands; if you need  that,  use  a  wrapper
              script, which may take the file to display either as an argument or on standard input.

       MANLESS
              If $MANLESS is set, man will not perform any of its usual processing to set up a prompt string for the less pager.
              Instead, the value of $MANLESS will be copied verbatim into $LESS.  For example, if you want  to  set  the  prompt
              string unconditionally to “my prompt string”, set $MANLESS to ‘-Psmy prompt string’.

       BROWSER
              If $BROWSER is set, its value is a colon-delimited list of commands, each of which in turn is used to try to start
              a web browser for man --html.  In each command, %s is replaced by a  filename  containing  the  HTML  output  from
              groff, %% is replaced by a single percent sign (%), and %c is replaced by a colon (:).

       SYSTEM If $SYSTEM is set, it will have the same effect as if it had been specified as the argument to the -m option.

       MANOPT If  $MANOPT  is  set, it will be parsed prior to man's command line and is expected to be in a similar format.  As
              all of the other man specific environment variables can be expressed as command line options, and are thus  candi‐
              dates for being included in $MANOPT it is expected that they will become obsolete.  N.B. All spaces that should be
              interpreted as part of an option's argument must be escaped.

       MANWIDTH
              If $MANWIDTH is set, its value is used as the line length for which manual pages should be formatted.   If  it  is
              not  set, manual pages will be formatted with a line length appropriate to the current terminal (using an ioctl(2)
              if available, the value of $COLUMNS, or falling back to 80 characters if neither is available).   Cat  pages  will
              only  be saved when the default formatting can be used, that is when the terminal line length is between 66 and 80
              characters.

       MAN_KEEP_FORMATTING
              Normally, when output is not being directed to a terminal (such as to a file or a pipe), formatting characters are
              discarded  to make it easier to read the result without special tools.  However, if $MAN_KEEP_FORMATTING is set to
              any non-empty value, these formatting characters are retained.  This may be useful for wrappers  around  man  that
              can interpret formatting characters.

       MAN_KEEP_STDERR
              Normally, when output is being directed to a terminal (usually to a pager), any error output from the command used
              to produce formatted versions of manual pages is discarded to avoid interfering with the  pager's  display.   Pro‐
              grams such as groff often produce relatively minor error messages about typographical problems such as poor align‐
              ment, which are unsightly and generally confusing when displayed along with the manual page.  However, some  users
              want  to see them anyway, so, if $MAN_KEEP_STDERR is set to any non-empty value, error output will be displayed as
              usual.

       LANG, LC_MESSAGES
              Depending on system and implementation, either or both of $LANG and $LC_MESSAGES will be interrogated for the cur‐
              rent  message  locale.  man will display its messages in that locale (if available).  See setlocale(3) for precise
              details.

FILES
       /etc/man_db.conf
              man-db configuration file.

       /usr/share/man
              A global manual page hierarchy.

       /usr/share/man/index.(bt|db|dir|pag)
              A traditional global index database cache.

       /var/cache/man/index.(bt|db|dir|pag)
              An FHS compliant global index database cache.

SEE ALSO
       apropos(1), groff(1), less(1), manpath(1), nroff(1), troff(1), whatis(1), zsoelim(1), setlocale(3), manpath(5), ascii(7),
       latin1(7), man(7), catman(8), mandb(8), the man-db package manual, FSSTND

HISTORY
       1990, 1991 - Originally written by John W. Eaton (jwe@che.utexas.edu).

       Dec 23 1992: Rik Faith (faith@cs.unc.edu) applied bug fixes supplied by Willem Kasdorp (wkasdo@nikhefk.nikef.nl).

       30th  April 1994 - 23rd February 2000: Wilf. (G.Wilford@ee.surrey.ac.uk) has been developing and maintaining this package
       with the help of a few dedicated people.

       30th October 1996 - 30th March 2001: Fabrizio Polacco <fpolacco@debian.org> maintained and enhanced this package for  the
       Debian project, with the help of all the community.

       31st March 2001 - present day: Colin Watson <cjwatson@debian.org> is now developing and maintaining man-db.



2.6.3                                                      2012-09-17                                                     MAN(1)
CP(1)                                                     User Commands                                                    CP(1)



NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if  an  existing  destination  file  cannot be opened, remove it and try again (this option is ignored when the -n
              option is also used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the specified attributes (default: mode,ownership,timestamps), if possible  additional  attributes:  con‐
              text, links, xattr, all

       -c     deprecated, same as --preserve=context

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove each existing destination file before attempting to open it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is newer than the destination file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well.
       That is the behavior selected by --sparse=auto.  Specify --sparse=always to create a sparse DEST file whenever the SOURCE
       file contains a long enough sequence of zero bytes.  Use --sparse=never to inhibit creation of sparse files.

       When  --reflink[=always]  is  specified, perform a lightweight copy, where the data blocks are copied only when modified.
       If this is not possible the copy fails, or if --reflink=auto is specified, fall back to a standard copy.

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may  be  selected
       via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As  a  special  case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the
       same name for an existing, regular file.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report cp translation bugs to <http://translationpro‐
       ject.org/team/>

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright    ©    2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for cp is maintained as a Texinfo manual.  If the info and cp programs are properly  installed  at
       your site, the command

              info coreutils 'cp invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                    CP(1)
GREP(1)                                              General Commands Manual                                             GREP(1)



NAME
       grep, egrep, fgrep - print lines matching a pattern

SYNOPSIS
       grep [OPTIONS] PATTERN [FILE...]
       grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]

DESCRIPTION
       grep searches the named input FILEs (or standard input if no files are named, or if a single hyphen-minus (-) is given as
       file name) for lines containing a match to the given PATTERN.  By default, grep prints the matching lines.

       In addition, two variant programs egrep and fgrep are available.  egrep is the same as grep -E.  fgrep  is  the  same  as
       grep -F.  Direct invocation as either egrep or fgrep is deprecated, but is provided to allow historical applications that
       rely on them to run unmodified.

OPTIONS
   Generic Program Information
       --help Print a usage message briefly summarizing these command-line options and the bug-reporting address, then exit.

       -V, --version
              Print the version number of grep to the standard output stream.  This version number should be included in all bug
              reports (see below).

   Matcher Selection
       -E, --extended-regexp
              Interpret PATTERN as an extended regular expression (ERE, see below).  (-E is specified by POSIX.)

       -F, --fixed-strings, --fixed-regexp
              Interpret  PATTERN  as  a  list  of  fixed  strings, separated by newlines, any of which is to be matched.  (-F is
              specified by POSIX, --fixed-regexp is an obsoleted alias, please do not use it in new scripts.)

       -G, --basic-regexp
              Interpret PATTERN as a basic regular expression (BRE, see below).  This is the default.

       -P, --perl-regexp
              Interpret PATTERN as a Perl regular expression.  This is highly experimental and grep -P may warn of unimplemented
              features.

   Matching Control
       -e PATTERN, --regexp=PATTERN
              Use  PATTERN  as  the  pattern.   This  can  be  used to specify multiple search patterns, or to protect a pattern
              beginning with a hyphen (-).  (-e is specified by POSIX.)

       -f FILE, --file=FILE
              Obtain patterns from FILE, one per line.  The empty file contains zero patterns, and  therefore  matches  nothing.
              (-f is specified by POSIX.)

       -i, --ignore-case
              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)

       -v, --invert-match
              Invert the sense of matching, to select non-matching lines.  (-v is specified by POSIX.)

       -w, --word-regexp
              Select  only  those  lines containing matches that form whole words.  The test is that the matching substring must
              either be at the beginning of the line, or preceded by a non-word constituent character.  Similarly,  it  must  be
              either  at  the  end of the line or followed by a non-word constituent character.  Word-constituent characters are
              letters, digits, and the underscore.

       -x, --line-regexp
              Select only those matches that exactly match the whole line.  (-x is specified by POSIX.)

       -y     Obsolete synonym for -i.

   General Output Control
       -c, --count
              Suppress normal output; instead print a count of matching lines for each input file.  With the -v,  --invert-match
              option (see below), count non-matching lines.  (-c is specified by POSIX.)

       --color[=WHEN], --colour[=WHEN]
              Surround  the  matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets,
              and separators (for fields and groups of context lines) with escape sequences to display  them  in  color  on  the
              terminal.   The  colors  are defined by the environment variable GREP_COLORS.  The deprecated environment variable
              GREP_COLOR is still supported, but its setting does not have priority.  WHEN is never, always, or auto.

       -L, --files-without-match
              Suppress normal output; instead print the name of each input file from which no output would  normally  have  been
              printed.  The scanning will stop on the first match.

       -l, --files-with-matches
              Suppress  normal  output;  instead  print  the  name of each input file from which output would normally have been
              printed.  The scanning will stop on the first match.  (-l is specified by POSIX.)

       -m NUM, --max-count=NUM
              Stop reading a file after NUM matching lines.  If the input is  standard  input  from  a  regular  file,  and  NUM
              matching lines are output, grep ensures that the standard input is positioned to just after the last matching line
              before exiting, regardless of the presence of trailing context lines.  This enables a calling process to resume  a
              search.   When grep stops after NUM matching lines, it outputs any trailing context lines.  When the -c or --count
              option is also used, grep does not output a count greater than NUM.  When the -v or --invert-match option is  also
              used, grep stops after outputting NUM non-matching lines.

       -o, --only-matching
              Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.

       -q, --quiet, --silent
              Quiet; do not write anything to standard output.  Exit immediately with zero status if any match is found, even if
              an error was detected.  Also see the -s or --no-messages option.  (-q is specified by POSIX.)

       -s, --no-messages
              Suppress error messages about nonexistent or unreadable files.  Portability note: unlike  GNU  grep,  7th  Edition
              Unix  grep  did  not  conform  to POSIX, because it lacked -q and its -s option behaved like GNU grep's -q option.
              USG-style grep also lacked -q but its -s option behaved like GNU grep.  Portable shell scripts should  avoid  both
              -q and -s and should redirect standard and error output to /dev/null instead.  (-s is specified by POSIX.)

   Output Line Prefix Control
       -b, --byte-offset
              Print  the  0-based  byte  offset  within  the  input file before each line of output.  If -o (--only-matching) is
              specified, print the offset of the matching part itself.

       -H, --with-filename
              Print the file name for each match.  This is the default when there is more than one file to search.

       -h, --no-filename
              Suppress the prefixing of file names on output.  This is the default when there is only one file (or only standard
              input) to search.

       --label=LABEL
              Display input actually coming from standard input as input coming from file LABEL.  This is especially useful when
              implementing tools like zgrep, e.g., gzip -cd foo.gz | grep --label=foo -H something.  See also the -H option.

       -n, --line-number
              Prefix each line of output with the 1-based line number within its input file.  (-n is specified by POSIX.)

       -T, --initial-tab
              Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs  looks
              normal.   This  is useful with options that prefix their output to the actual content: -H,-n, and -b.  In order to
              improve the probability that lines from a single file will all start at the same column, this also causes the line
              number and byte offset (if present) to be printed in a minimum size field width.

       -u, --unix-byte-offsets
              Report  Unix-style  byte offsets.  This switch causes grep to report byte offsets as if the file were a Unix-style
              text file, i.e., with CR characters stripped off.  This will produce results identical to running grep on  a  Unix
              machine.  This option has no effect unless -b option is also used; it has no effect on platforms other than MS-DOS
              and MS-Windows.

       -Z, --null
              Output a zero byte (the ASCII NUL character) instead of the character that normally  follows  a  file  name.   For
              example,  grep  -lZ  outputs a zero byte after each file name instead of the usual newline.  This option makes the
              output unambiguous, even in the presence of file names containing unusual characters like newlines.   This  option
              can  be used with commands like find -print0, perl -0, sort -z, and xargs -0 to process arbitrary file names, even
              those that contain newline characters.

   Context Line Control
       -A NUM, --after-context=NUM
              Print NUM lines of trailing context after matching lines.  Places a line containing a group  separator  (described
              under --group-separator) between contiguous groups of matches.  With the -o or --only-matching option, this has no
              effect and a warning is given.

       -B NUM, --before-context=NUM
              Print NUM lines of leading context before matching lines.  Places a line containing a group  separator  (described
              under --group-separator) between contiguous groups of matches.  With the -o or --only-matching option, this has no
              effect and a warning is given.

       -C NUM, -NUM, --context=NUM
              Print NUM lines of output context.  Places a line containing a group separator (described under --group-separator)
              between  contiguous groups of matches.  With the -o or --only-matching option, this has no effect and a warning is
              given.

       --group-separator=SEP
              Use SEP as a group separator. By default SEP is double hyphen (--).

       --no-group-separator
              Use empty string as a group separator.

   File and Directory Selection
       -a, --text
              Process a binary file as if it were text; this is equivalent to the --binary-files=text option.

       --binary-files=TYPE
              If the first few bytes of a file indicate that the file contains binary data, assume that  the  file  is  of  type
              TYPE.   By  default, TYPE is binary, and grep normally outputs either a one-line message saying that a binary file
              matches, or no message if there is no match.  If TYPE is without-match, grep assumes that a binary file  does  not
              match;  this  is  equivalent  to the -I option.  If TYPE is text, grep processes a binary file as if it were text;
              this is equivalent to the -a option.  Warning: grep --binary-files=text might output  binary  garbage,  which  can
              have nasty side effects if the output is a terminal and if the terminal driver interprets some of it as commands.

       -D ACTION, --devices=ACTION
              If  an  input file is a device, FIFO or socket, use ACTION to process it.  By default, ACTION is read, which means
              that devices are read just as if they were ordinary files.  If ACTION is skip, devices are silently skipped.

       -d ACTION, --directories=ACTION
              If an input file is a directory, use ACTION to process it.  By default, ACTION is  read,  i.e.,  read  directories
              just  as  if  they were ordinary files.  If ACTION is skip, silently skip directories.  If ACTION is recurse, read
              all files under each directory, recursively, following symbolic links only if they are on the command line.   This
              is equivalent to the -r option.

       --exclude=GLOB
              Skip  files  whose base name matches GLOB (using wildcard matching).  A file-name glob can use *, ?, and [...]  as
              wildcards, and \ to quote a wildcard or backslash character literally.

       --exclude-from=FILE
              Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching as described
              under --exclude).

       --exclude-dir=DIR
              Exclude directories matching the pattern DIR from recursive searches.

       -I     Process  a  binary  file as if it did not contain matching data; this is equivalent to the --binary-files=without-
              match option.

       --include=GLOB
              Search only files whose base name matches GLOB (using wildcard matching as described under --exclude).

       -r, --recursive
              Read all files under each directory, recursively, following symbolic links only if they are on the  command  line.
              This is equivalent to the -d recurse option.

       -R, --dereference-recursive
              Read all files under each directory, recursively.  Follow all symbolic links, unlike -r.

   Other Options
       --line-buffered
              Use line buffering on output.  This can cause a performance penalty.

       -U, --binary
              Treat  the  file(s)  as binary.  By default, under MS-DOS and MS-Windows, grep guesses the file type by looking at
              the contents of the first 32KB read from the file.  If grep decides the file is a text  file,  it  strips  the  CR
              characters  from the original file contents (to make regular expressions with ^ and $ work correctly).  Specifying
              -U overrules this guesswork, causing all files to be read and passed to the matching mechanism  verbatim;  if  the
              file  is  a  text file with CR/LF pairs at the end of each line, this will cause some regular expressions to fail.
              This option has no effect on platforms other than MS-DOS and MS-Windows.

       -z, --null-data
              Treat the input as a set of lines, each terminated by a zero byte (the ASCII NUL character) instead of a  newline.
              Like the -Z or --null option, this option can be used with commands like sort -z to process arbitrary file names.

REGULAR EXPRESSIONS
       A  regular  expression  is a pattern that describes a set of strings.  Regular expressions are constructed analogously to
       arithmetic expressions, by using various operators to combine smaller expressions.

       grep understands three different versions of regular expression syntax: “basic,”  “extended”  and  “perl.”  In  GNU grep,
       there  is  no difference in available functionality between basic and extended syntaxes.  In other implementations, basic
       regular expressions are less powerful.  The following description applies to extended  regular  expressions;  differences
       for basic regular expressions are summarized afterwards.  Perl regular expressions give additional functionality, and are
       documented in pcresyntax(3) and pcrepattern(3), but may not be available on every system.

       The fundamental building blocks are the regular expressions that match a single character.   Most  characters,  including
       all  letters  and  digits, are regular expressions that match themselves.  Any meta-character with special meaning may be
       quoted by preceding it with a backslash.

       The period . matches any single character.

   Character Classes and Bracket Expressions
       A bracket expression is a list of characters enclosed by [ and ].  It matches any single character in that list;  if  the
       first  character  of  the  list  is  the caret ^ then it matches any character not in the list.  For example, the regular
       expression [0123456789] matches any single digit.

       Within a bracket expression, a range expression consists of two characters separated by a hyphen.  It matches any  single
       character that sorts between the two characters, inclusive, using the locale's collating sequence and character set.  For
       example, in the default C locale, [a-d] is equivalent to [abcd].  Many locales sort characters in dictionary  order,  and
       in  these  locales  [a-d]  is  typically  not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.  To
       obtain the traditional interpretation of bracket expressions, you can use the C locale by setting the LC_ALL  environment
       variable to the value C.

       Finally, certain named classes of characters are predefined within bracket expressions, as follows.  Their names are self
       explanatory, and they are  [:alnum:],  [:alpha:],  [:cntrl:],  [:digit:],  [:graph:],  [:lower:],  [:print:],  [:punct:],
       [:space:],  [:upper:],  and [:xdigit:].  For example, [[:alnum:]] means the character class of numbers and letters in the
       current locale. In the C locale and ASCII character set encoding, this is  the  same  as  [0-9A-Za-z].   (Note  that  the
       brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting
       the bracket expression.)  Most meta-characters lose their special meaning  inside  bracket  expressions.   To  include  a
       literal  ]  place  it  first  in  the  list.  Similarly, to include a literal ^ place it anywhere but first.  Finally, to
       include a literal - place it last.

   Anchoring
       The caret ^ and the dollar sign $ are meta-characters that respectively match the empty string at the beginning  and  end
       of a line.

   The Backslash Character and Special Expressions
       The  symbols \< and \> respectively match the empty string at the beginning and end of a word.  The symbol \b matches the
       empty string at the edge of a word, and \B matches the empty string provided it's not at the edge of a word.  The  symbol
       \w is a synonym for [_[:alnum:]] and \W is a synonym for [^_[:alnum:]].

   Repetition
       A regular expression may be followed by one of several repetition operators:
       ?      The preceding item is optional and matched at most once.
       *      The preceding item will be matched zero or more times.
       +      The preceding item will be matched one or more times.
       {n}    The preceding item is matched exactly n times.
       {n,}   The preceding item is matched n or more times.
       {,m}   The preceding item is matched at most m times.  This is a GNU extension.
       {n,m}  The preceding item is matched at least n times, but not more than m times.

   Concatenation
       Two  regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating
       two substrings that respectively match the concatenated expressions.

   Alternation
       Two regular expressions may be joined by the infix operator |;  the  resulting  regular  expression  matches  any  string
       matching either alternate expression.

   Precedence
       Repetition  takes precedence over concatenation, which in turn takes precedence over alternation.  A whole expression may
       be enclosed in parentheses to override these precedence rules and form a subexpression.

   Back References and Subexpressions
       The back-reference \n, where n is a single digit, matches the substring  previously  matched  by  the  nth  parenthesized
       subexpression of the regular expression.

   Basic vs Extended Regular Expressions
       In  basic  regular  expressions  the  meta-characters  ?,  +,  {, |, (, and ) lose their special meaning; instead use the
       backslashed versions \?, \+, \{, \|, \(, and \).

       Traditional egrep did not support the { meta-character, and some egrep implementations support \{  instead,  so  portable
       scripts should avoid { in grep -E patterns and should use [{] to match a literal {.

       GNU  grep -E  attempts  to  support  traditional  usage  by assuming that { is not special if it would be the start of an
       invalid interval specification.  For example, the command grep -E '{1' searches for the two-character string  {1  instead
       of  reporting a syntax error in the regular expression.  POSIX allows this behavior as an extension, but portable scripts
       should avoid it.

ENVIRONMENT VARIABLES
       The behavior of grep is affected by the following environment variables.

       The locale for category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo,  LANG,  in  that
       order.   The  first  of  these  variables  that  is  set  specifies  the  locale.  For example, if LC_ALL is not set, but
       LC_MESSAGES is set to pt_BR, then the Brazilian Portuguese locale is used for the LC_MESSAGES category.  The C locale  is
       used  if none of these environment variables are set, if the locale catalog is not installed, or if grep was not compiled
       with national language support (NLS).

       GREP_OPTIONS
              This variable specifies default options to  be  placed  in  front  of  any  explicit  options.   For  example,  if
              GREP_OPTIONS   is   '--binary-files=without-match   --directories=skip',  grep  behaves  as  if  the  two  options
              --binary-files=without-match and --directories=skip had  been  specified  before  any  explicit  options.   Option
              specifications  are separated by whitespace.  A backslash escapes the next character, so it can be used to specify
              an option containing whitespace or a backslash.

       GREP_COLOR
              This variable specifies the color used to highlight matched (non-empty)  text.   It  is  deprecated  in  favor  of
              GREP_COLORS,  but  still supported.  The mt, ms, and mc capabilities of GREP_COLORS have priority over it.  It can
              only specify the color used to highlight the matching non-empty text in any matching line (a  selected  line  when
              the -v command-line option is omitted, or a context line when -v is specified).  The default is 01;31, which means
              a bold red foreground text on the terminal's default background.

       GREP_COLORS
              Specifies the colors and other attributes used to highlight various parts of the output.  Its value  is  a  colon-
              separated  list of capabilities that defaults to ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the rv and
              ne boolean capabilities omitted (i.e., false).  Supported capabilities are as follows.

              sl=    SGR substring for whole selected lines (i.e., matching lines when the -v command-line option is omitted, or
                     non-matching  lines  when  -v  is specified).  If however the boolean rv capability and the -v command-line
                     option are both specified, it applies to context matching lines instead.  The default is empty  (i.e.,  the
                     terminal's default color pair).

              cx=    SGR substring for whole context lines (i.e., non-matching lines when the -v command-line option is omitted,
                     or matching lines when -v is specified).  If however the boolean rv  capability  and  the  -v  command-line
                     option  are both specified, it applies to selected non-matching lines instead.  The default is empty (i.e.,
                     the terminal's default color pair).

              rv     Boolean value that reverses (swaps) the meanings of the sl= and cx= capabilities when the  -v  command-line
                     option is specified.  The default is false (i.e., the capability is omitted).

              mt=01;31
                     SGR  substring for matching non-empty text in any matching line (i.e., a selected line when the -v command-
                     line option is omitted, or a context line when -v is specified).  Setting this  is  equivalent  to  setting
                     both  ms=  and  mc=  at once to the same value.  The default is a bold red text foreground over the current
                     line background.

              ms=01;31
                     SGR substring for matching non-empty text in a selected line.  (This is only used when the -v  command-line
                     option  is  omitted.)   The  effect of the sl= (or cx= if rv) capability remains active when this kicks in.
                     The default is a bold red text foreground over the current line background.

              mc=01;31
                     SGR substring for matching non-empty text in a context line.  (This is only used when the  -v  command-line
                     option  is  specified.)  The effect of the cx= (or sl= if rv) capability remains active when this kicks in.
                     The default is a bold red text foreground over the current line background.

              fn=35  SGR substring for file names prefixing any content line.  The default is a magenta text foreground over the
                     terminal's default background.

              ln=32  SGR substring for line numbers prefixing any content line.  The default is a green text foreground over the
                     terminal's default background.

              bn=32  SGR substring for byte offsets prefixing any content line.  The default is a green text foreground over the
                     terminal's default background.

              se=36  SGR  substring  for  separators  that  are  inserted between selected line fields (:), between context line
                     fields, (-), and between groups of adjacent lines when nonzero context is specified (--).  The default is a
                     cyan text foreground over the terminal's default background.

              ne     Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (\33[K) each time
                     a colorized item ends.  This is needed on terminals on which EL is not supported.  It is  otherwise  useful
                     on  terminals  for  which  the  back_color_erase (bce) boolean terminfo capability does not apply, when the
                     chosen highlight colors do not affect the background, or when EL is too slow or causes  too  much  flicker.
                     The default is false (i.e., the capability is omitted).

              Note that boolean capabilities have no =...  part.  They are omitted (i.e., false) by default and become true when
              specified.

              See the Select Graphic Rendition (SGR) section in the  documentation  of  the  text  terminal  that  is  used  for
              permitted  values  and  their  meaning  as  character  attributes.  These substring values are integers in decimal
              representation and can be concatenated with semicolons.  grep takes care of assembling the result into a  complete
              SGR  sequence  (\33[...m).   Common  values to concatenate include 1 for bold, 4 for underline, 5 for blink, 7 for
              inverse, 39 for default foreground color, 30 to 37 for foreground colors, 90 to 97 for  16-color  mode  foreground
              colors, 38;5;0 to 38;5;255 for 88-color and 256-color modes foreground colors, 49 for default background color, 40
              to 47 for background colors, 100 to 107 for 16-color mode background colors, and 48;5;0 to 48;5;255  for  88-color
              and 256-color modes background colors.

       LC_ALL, LC_COLLATE, LANG
              These  variables  specify  the locale for the LC_COLLATE category, which determines the collating sequence used to
              interpret range expressions like [a-z].

       LC_ALL, LC_CTYPE, LANG
              These variables specify the locale for the LC_CTYPE category, which determines the type of characters, e.g., which
              characters are whitespace.

       LC_ALL, LC_MESSAGES, LANG
              These  variables specify the locale for the LC_MESSAGES category, which determines the language that grep uses for
              messages.  The default C locale uses American English messages.

       POSIXLY_CORRECT
              If set, grep behaves as POSIX requires; otherwise, grep behaves more like other GNU programs.  POSIX requires that
              options  that  follow file names must be treated as file names; by default, such options are permuted to the front
              of the operand list and are treated as options.  Also, POSIX requires that unrecognized options  be  diagnosed  as
              “illegal”,  but  since  they  are  not  really  against  the  law  the  default  is to diagnose them as “invalid”.
              POSIXLY_CORRECT also disables _N_GNU_nonoption_argv_flags_, described below.

       _N_GNU_nonoption_argv_flags_
              (Here N is grep's numeric process ID.)  If the ith character of this environment variable's value  is  1,  do  not
              consider  the ith operand of grep to be an option, even if it appears to be one.  A shell can put this variable in
              the environment for each command it runs, specifying  which  operands  are  the  results  of  file  name  wildcard
              expansion and therefore should not be treated as options.  This behavior is available only with the GNU C library,
              and only when POSIXLY_CORRECT is not set.

EXIT STATUS
       Normally, the exit status is 0 if selected lines are found and 1 otherwise.  But  the  exit  status  is  2  if  an  error
       occurred,  unless  the  -q or --quiet or --silent option is used and a selected line is found.  Note, however, that POSIX
       only mandates, for programs such as grep, cmp, and diff, that the exit status in case of error be greater than 1;  it  is
       therefore  advisable,  for  the sake of portability, to use logic that tests for this general condition instead of strict
       equality with 2.

COPYRIGHT
       Copyright 1998-2000, 2002, 2005-2014 Free Software Foundation, Inc.

       This is free software; see the source for copying conditions.  There is NO warranty;  not  even  for  MERCHANTABILITY  or
       FITNESS FOR A PARTICULAR PURPOSE.

BUGS
   Reporting Bugs
       Email      bug      reports      to      <bug-grep@gnu.org>,     a     mailing     list     whose     web     page     is
       <http://lists.gnu.org/mailman/listinfo/bug-grep>.      grep's     Savannah     bug     tracker     is     located      at
       <http://savannah.gnu.org/bugs/?group=grep>.

   Known Bugs
       Large  repetition counts in the {n,m} construct may cause grep to use lots of memory.  In addition, certain other obscure
       regular expressions require exponential time and space, and may cause grep to run out of memory.

       Back-references are very slow, and may require exponential time.

SEE ALSO
   Regular Manual Pages
       awk(1), cmp(1), diff(1), find(1), gzip(1), perl(1), sed(1), sort(1), xargs(1), zgrep(1), read(2), pcre(3), pcresyntax(3),
       pcrepattern(3), terminfo(5), glob(7), regex(7).

   POSIX Programmer's Manual Page
       grep(1p).

   TeXinfo Documentation
       The    full    documentation    for   grep   is   maintained   as   a   TeXinfo   manual,   which   you   can   read   at
       http://www.gnu.org/software/grep/manual/.  If the info and grep programs are properly installed at your site, the command

              info grep

       should give you access to the complete manual.

NOTES
       This man page is maintained only fitfully; the full documentation is often more up-to-date.

       GNU's not Unix, but Unix is a beast; its plural form is Unixen.



User Commands                                             GNU grep 2.20                                                  GREP(1)
MKDIR(1)                                                  User Commands                                                 MKDIR(1)



NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory to the default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report mkdir translation bugs to <http://translation‐
       project.org/team/>

AUTHOR
       Written by David MacKenzie.

COPYRIGHT
       Copyright   ©   2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3    or    later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       mkdir(2)

       The  full  documentation  for  mkdir  is  maintained  as  a  Texinfo manual.  If the info and mkdir programs are properly
       installed at your site, the command

              info coreutils 'mkdir invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                 MKDIR(1)
MV(1)                                                     User Commands                                                    MV(1)



NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final one takes effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move only when the SOURCE file is newer than the destination file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The  backup  suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may be selected
       via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report mv translation bugs to <http://translationpro‐
       ject.org/team/>

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright    ©    2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       rename(2)

       The full documentation for mv is maintained as a Texinfo manual.  If the info and mv programs are properly  installed  at
       your site, the command

              info coreutils 'mv invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                    MV(1)
SED(1)                                                    User Commands                                                   SED(1)



NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is  a  stream  editor.   A stream editor is used to perform basic text transformations on an input stream (a file or
       input from a pipeline).  While in some ways similar to an editor which permits scripted edits (such as ed), sed works  by
       making  only one pass over the input(s), and is consequently more efficient.  But it is sed's ability to filter text in a
       pipeline which particularly distinguishes it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -c, --copy

              use copy instead of rename when shuffling files in -i mode

       -b, --binary

              does nothing; for compatibility with WIN32/CYGWIN/MSDOS/EMX ( open files in binary mode (CR+LFs  are  not  treated
              specially))

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as a single continuous long stream.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help

              display this help and exit

       --version

              output version information and exit

       If  no  -e, --expression, -f, or --file option is given, then the first non-option argument is taken as the sed script to
       interpret.  All remaining arguments are names of input files; if no input files are specified, then the standard input is
       read.

       GNU  sed  home page: <http://www.gnu.org/software/sed/>.  General help using GNU software: <http://www.gnu.org/gethelp/>.
       E-mail bug reports to: <bug-sed@gnu.org>.  Be sure to include the word ``sed'' somewhere in the ``Subject:'' field.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to those who already know sed;  other  documentation
       (such as the texinfo document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately  quit  the sed script without processing any more input, except that if auto-print is not disabled the
              current pattern space will be printed.  The exit code argument is a GNU extension.

       Q [exit-code]
              Immediately quit the sed script without processing any more input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append a line read from filename.  Each invocation of the command reads a line from  the  file.   This  is  a  GNU
              extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If  pattern space contains no newline, start a normal new cycle as if the d command was issued.  Otherwise, delete
              text in the pattern space up to the first newline, and restart cycle with the  resultant  pattern  space,  without
              reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List  out  the  current  line  in a ``visually unambiguous'' form, breaking it at width characters.  This is a GNU
              extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
              Attempt to match regexp against the pattern space.  If successful, replace that portion matched with  replacement.
              The  replacement  may contain the special character & to refer to that portion of the pattern space which matched,
              and the special escapes \1 through \9 to refer to the corresponding matching sub-expressions in the regexp.

       t label
              If a s/// has done a successful substitution since the last input line was read and since the last t or T command,
              then branch to label; if label is omitted, branch to end of script.

       T label
              If  no  s///  has done a successful substitution since the last input line was read and since the last t or T com‐
              mand, then branch to label; if label is omitted, branch to end of script.  This is a GNU extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write the first line of the current pattern space to filename.  This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space which appear in source to the corresponding character in dest.

Addresses
       Sed commands can be given with no addresses, in which case the command will be executed for all  input  lines;  with  one
       address, in which case the command will only be executed for input lines which match that address; or with two addresses,
       in which case the command will be executed for all input lines which match the inclusive range of lines starting from the
       first address and continuing to the second address.  Three things to note about address ranges: the syntax is addr1,addr2
       (i.e., the addresses are separated by a comma); the line which addr1 matched will  always  be  accepted,  even  if  addr2
       selects an earlier line; and if addr2 is a regexp, it will not be tested against the line that addr1 matched.

       After  the  address  (or  address-range),  and before the command, a !  may be inserted, which specifies that the command
       shall only be executed if the address (or address-range) does not match.

       The following address types are supported:

       number Match only the specified line number (which increments cumulatively across files, unless the -s option  is  speci‐
              fied on the command line).

       first~step
              Match  every  step'th line starting with line first.  For example, ``sed -n 1~2p'' will print all the odd-numbered
              lines in the input stream, and the address 2~5 will match every fifth line, starting with the second.   first  can
              be zero; in this case, sed operates as if it were equal to step.  (This is an extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match lines matching the regular expression regexp.  The c may be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start  out  in  "matched  first  address" state, until addr2 is found.  This is similar to 1,addr2, except that if
              addr2 matches the very first line of input the 0,addr2 form will be at the end of its range, whereas  the  1,addr2
              form will still be at the beginning of its range.  This works only when addr2 is a regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will match addr1 and the lines following addr1 until the next line whose input line number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren't completely because of performance problems.  The \n sequence in a regu‐
       lar expression matches the newline character, and similarly for \a, \t, and other sequences.

BUGS
       E-mail bug reports to bug-sed@gnu.org.  Also, please include the output of ``sed --version'' in the body of  your  report
       if at all possible.

AUTHOR
       Written  by  Jay  Fenlason,  Tom  Lord,  Ken  Pizzini,  and  Paolo Bonzini.  GNU sed home page: <http://www.gnu.org/soft‐
       ware/sed/>.  General help using GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug reports  to:  <bug-sed@gnu.org>.
       Be sure to include the word ``sed'' somewhere in the ``Subject:'' field.

COPYRIGHT
       Copyright    ©    2012   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ (http://sed.sf.net/grab‐
       bag/tutorials/sedfaq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly installed at
       your site, the command

              info sed

       should give you access to the complete manual.



sed 4.2.2                                                September 2020                                                   SED(1)
SORT(1)                                                   User Commands                                                  SORT(1)



NAME
       sort - sort lines of text files

SYNOPSIS
       sort [OPTION]... [FILE]...
       sort [OPTION]... --files0-from=F

DESCRIPTION
       Write sorted concatenation of all FILE(s) to standard output.

       Mandatory arguments to long options are mandatory for short options too.  Ordering options:

       -b, --ignore-leading-blanks
              ignore leading blanks

       -d, --dictionary-order
              consider only blanks and alphanumeric characters

       -f, --ignore-case
              fold lower case to upper case characters

       -g, --general-numeric-sort
              compare according to general numerical value

       -i, --ignore-nonprinting
              consider only printable characters

       -M, --month-sort
              compare (unknown) < 'JAN' < ... < 'DEC'

       -h, --human-numeric-sort
              compare human readable numbers (e.g., 2K 1G)

       -n, --numeric-sort
              compare according to string numerical value

       -R, --random-sort
              sort by random hash of keys

       --random-source=FILE
              get random bytes from FILE

       -r, --reverse
              reverse the result of comparisons

       --sort=WORD
              sort according to WORD: general-numeric -g, human-numeric -h, month -M, numeric -n, random -R, version -V

       -V, --version-sort
              natural sort of (version) numbers within text

       Other options:

       --batch-size=NMERGE
              merge at most NMERGE inputs at once; for more use temp files

       -c, --check, --check=diagnose-first
              check for sorted input; do not sort

       -C, --check=quiet, --check=silent
              like -c, but do not report first bad line

       --compress-program=PROG
              compress temporaries with PROG; decompress them with PROG -d

       --debug
              annotate the part of the line used to sort, and warn about questionable usage to stderr

       --files0-from=F
              read  input  from  the  files specified by NUL-terminated names in file F; If F is - then read names from standard
              input

       -k, --key=KEYDEF
              sort via a key; KEYDEF gives location and type

       -m, --merge
              merge already sorted files; do not sort

       -o, --output=FILE
              write result to FILE instead of standard output

       -s, --stable
              stabilize sort by disabling last-resort comparison

       -S, --buffer-size=SIZE
              use SIZE for main memory buffer

       -t, --field-separator=SEP
              use SEP instead of non-blank to blank transition

       -T, --temporary-directory=DIR
              use DIR for temporaries, not $TMPDIR or /tmp; multiple options specify multiple directories

       --parallel=N
              change the number of sorts run concurrently to N

       -u, --unique
              with -c, check for strict ordering; without -c, output only the first of an equal run

       -z, --zero-terminated
              end lines with 0 byte, not newline

       --help display this help and exit

       --version
              output version information and exit

       KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position  in
       the field; both are origin 1, and the stop position defaults to the line's end.  If neither -t nor -b is in effect, char‐
       acters in a field are counted from the beginning of the preceding whitespace.  OPTS is one or more single-letter ordering
       options  [bdfgiMhnRrV],  which override global ordering options for that key.  If no key is given, use the entire line as
       the key.

       SIZE may be followed by the following multiplicative suffixes: % 1% of memory, b 1, K 1024 (default), and so on for M, G,
       T, P, E, Z, Y.

       With no FILE, or when FILE is -, read standard input.

       ***  WARNING  ***  The  locale specified by the environment affects sort order.  Set LC_ALL=C to get the traditional sort
       order that uses native byte values.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report sort translation bugs to  <http://translation‐
       project.org/team/>

AUTHOR
       Written by Mike Haertel and Paul Eggert.

COPYRIGHT
       Copyright    ©    2013   Free   Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       uniq(1)

       The full documentation for sort is maintained as a Texinfo manual.  If the info and sort programs are properly  installed
       at your site, the command

              info coreutils 'sort invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                        November 2020                                                  SORT(1)
ZIP(1L)                                                                                                                  ZIP(1L)



NAME
       zip - package and compress (archive) files

SYNOPSIS
       zip  [-aABcdDeEfFghjklLmoqrRSTuvVwXyz!@$] [--longoption ...]  [-b path] [-n suffixes] [-t date] [-tt date] [zipfile [file
       ...]]  [-xi list]

       zipcloak (see separate man page)

       zipnote (see separate man page)

       zipsplit (see separate man page)

       Note:  Command line processing in zip has been changed to support long options and handle all options and arguments  more
       consistently.  Some old command lines that depend on command line inconsistencies may no longer work.

DESCRIPTION
       zip  is  a  compression and file packaging utility for Unix, VMS, MSDOS, OS/2, Windows 9x/NT/XP, Minix, Atari, Macintosh,
       Amiga, and Acorn RISC OS.  It is analogous to a combination of the Unix commands tar(1) and compress(1) and is compatible
       with PKZIP (Phil Katz's ZIP for MSDOS systems).

       A  companion program (unzip(1L)) unpacks zip archives.  The zip and unzip(1L) programs can work with archives produced by
       PKZIP (supporting most PKZIP features up to PKZIP version 4.6), and PKZIP and PKUNZIP can work with archives produced  by
       zip  (with  some exceptions, notably streamed archives, but recent changes in the zip file standard may facilitate better
       compatibility).  zip version 3.0 is compatible with PKZIP 2.04 and also supports the Zip64 extensions of PKZIP 4.5  which
       allow archives as well as files to exceed the previous 2 GB limit (4 GB in some cases).  zip also now supports bzip2 com‐
       pression if the bzip2 library is included when zip is compiled.  Note that PKUNZIP 1.10 cannot extract files produced  by
       PKZIP 2.04 or zip 3.0. You must use PKUNZIP 2.04g or unzip 5.0p1 (or later versions) to extract them.

       See the EXAMPLES section at the bottom of this page for examples of some typical uses of zip.

       Large Archives and Zip64.   zip  automatically  uses the Zip64 extensions when files larger than 4 GB are added to an ar‐
       chive, an archive containing Zip64 entries is updated (if the resulting archive still needs Zip64), the size of  the  ar‐
       chive  will  exceed 4 GB, or when the number of entries in the archive will exceed about 64K.  Zip64 is also used for ar‐
       chives streamed from standard input as the size of such archives are not known in advance, but the  option  -fz-  can  be
       used  to  force  zip  to create PKZIP 2 compatible archives (as long as Zip64 extensions are not needed).  You must use a
       PKZIP 4.5 compatible unzip, such as unzip 6.0 or later, to extract files using the Zip64 extensions.

       In addition, streamed archives, entries encrypted with standard encryption, or split  archives  created  with  the  pause
       option  may not be compatible with PKZIP as data descriptors are used and PKZIP at the time of this writing does not sup‐
       port data descriptors (but recent changes in the PKWare published zip standard now include  some  support  for  the  data
       descriptor format zip uses).


       Mac  OS  X.  Though previous Mac versions had their own zip port, zip supports Mac OS X as part of the Unix port and most
       Unix features apply.  References to "MacOS" below generally refer to MacOS versions older than OS X.   Support  for  some
       Mac OS features in the Unix Mac OS X port, such as resource forks, is expected in the next zip release.


       For a brief help on zip and unzip, run each without specifying any parameters on the command line.


USE
       The  program  is  useful for packaging a set of files for distribution; for archiving files; and for saving disk space by
       temporarily compressing unused files or directories.

       The zip program puts one or more compressed files into a single zip archive,  along  with  information  about  the  files
       (name,  path,  date,  time  of last modification, protection, and check information to verify file integrity).  An entire
       directory structure can be packed into a zip archive with a single command.  Compression ratios of 2:1 to 3:1 are  common
       for text files.  zip has one compression method (deflation) and can also store files without compression.  (If bzip2 sup‐
       port is added, zip can also compress using bzip2 compression, but such entries  require  a  reasonably  modern  unzip  to
       decompress.  When bzip2 compression is selected, it replaces deflation as the default method.)  zip automatically chooses
       the better of the two (deflation or store or, if bzip2 is selected, bzip2 or store) for each file to be compressed.

       Command format.  The basic command format is

              zip options archive inpath inpath ...

       where archive is a new or existing zip archive and inpath is a directory or file  path  optionally  including  wildcards.
       When  given  the name of an existing zip archive, zip will replace identically named entries in the zip archive (matching
       the relative names as stored in the archive) or add entries for new names.  For example, if foo.zip exists  and  contains
       foo/file1 and foo/file2, and the directory foo contains the files foo/file1 and foo/file3, then:

              zip -r foo.zip foo

       or more concisely

              zip -r foo foo

       will  replace  foo/file1 in foo.zip and add foo/file3 to foo.zip.  After this, foo.zip contains foo/file1, foo/file2, and
       foo/file3, with foo/file2 unchanged from before.

       So if before the zip command is executed foo.zip has:

               foo/file1 foo/file2

       and directory foo has:

               file1 file3

       then foo.zip will have:

               foo/file1 foo/file2 foo/file3

       where foo/file1 is replaced and foo/file3 is new.

       -@ file lists.  If a file list is specified as -@ [Not on MacOS], zip takes the list of input files from  standard  input
       instead of from the command line.  For example,

              zip -@ foo

       will store the files listed one per line on stdin in foo.zip.

       Under Unix, this option can be used to powerful effect in conjunction with the find (1) command.  For example, to archive
       all the C source files in the current directory and its subdirectories:

              find . -name "*.[ch]" -print | zip source -@

       (note that the pattern must be quoted to keep the shell from expanding it).

       Streaming input and output.  zip will also accept a single dash ("-") as the zip file name, in which case it  will  write
       the zip file to standard output, allowing the output to be piped to another program. For example:

              zip -r - . | dd of=/dev/nrst0 obs=16k

       would  write  the  zip  output directly to a tape with the specified block size for the purpose of backing up the current
       directory.

       zip also accepts a single dash ("-") as the name of a file to be compressed, in which case it will  read  the  file  from
       standard input, allowing zip to take input from another program. For example:

              tar cf - . | zip backup -

       would compress the output of the tar command for the purpose of backing up the current directory. This generally produces
       better compression than the previous example using the -r option because zip can take  advantage  of  redundancy  between
       files. The backup can be restored using the command

              unzip -p backup | tar xf -

       When no zip file name is given and stdout is not a terminal, zip acts as a filter, compressing standard input to standard
       output.  For example,

              tar cf - . | zip | dd of=/dev/nrst0 obs=16k

       is equivalent to

              tar cf - . | zip - - | dd of=/dev/nrst0 obs=16k

       zip archives created in this manner can be extracted with the program funzip which is provided in the unzip  package,  or
       by  gunzip which is provided in the gzip package (but some gunzip may not support this if zip used the Zip64 extensions).
       For example:

              dd if=/dev/nrst0  ibs=16k | funzip | tar xvf -

       The stream can also be saved to a file and unzip used.

       If Zip64 support for large files and archives is enabled and zip is used as a filter, zip creates a  Zip64  archive  that
       requires  a  PKZIP  4.5  or later compatible unzip to read it.  This is to avoid amgibuities in the zip file structure as
       defined in the current zip standard (PKWARE AppNote) where the decision to use Zip64 needs to  be  made  before  data  is
       written  for  the  entry,  but  for a stream the size of the data is not known at that point.  If the data is known to be
       smaller than 4 GB, the option -fz- can be used to prevent use of Zip64, but zip will exit with an error if Zip64  was  in
       fact  needed.   zip 3 and unzip 6 and later can read archives with Zip64 entries.  Also, zip removes the Zip64 extensions
       if not needed when archive entries are copied (see the -U (--copy) option).

       When directing the output to another file, note that all options should be before  the  redirection  including  -x.   For
       example:

              zip archive "*.h" "*.c" -x donotinclude.h orthis.h > tofile

       Zip files.   When  changing  an  existing  zip  archive,  zip will write a temporary file with the new contents, and only
       replace the old one when the process of creating the new version has been completed without error.

       If the name of the zip archive does not contain an extension, the extension .zip is added. If the name  already  contains
       an  extension  other  than  .zip, the existing extension is kept unchanged.  However, split archives (archives split over
       multiple files) require the .zip extension on the last split.

       Scanning and reading files.  When zip starts, it scans for files to process (if needed).  If this scan takes longer  than
       about  5 seconds, zip will display a "Scanning files" message and start displaying progress dots every 2 seconds or every
       so many entries processed, whichever takes longer.  If there is more than 2 seconds between dots it could  indicate  that
       finding  each  file is taking time and could mean a slow network connection for example.  (Actually the initial file scan
       is a two-step process where the directory scan is followed by a sort and these two steps are separated with  a  space  in
       the  dots.   If updating an existing archive, a space also appears between the existing file scan and the new file scan.)
       The scanning files dots are not controlled by the -ds dot size option, but the dots  are  turned  off  by  the  -q  quiet
       option.   The -sf show files option can be used to scan for files and get the list of files scanned without actually pro‐
       cessing them.

       If zip is not able to read a file, it issues a warning but continues.  See the -MM option below for more on how zip  han‐
       dles  patterns  that are not matched and files that are not readable.  If some files were skipped, a warning is issued at
       the end of the zip operation noting how many files were read and how many skipped.

       Command modes.  zip now supports two distinct types of command modes, external and internal.  The  external  modes  (add,
       update,  and  freshen)  read  files  from  the file system (as well as from an existing archive) while the internal modes
       (delete and copy) operate exclusively on entries in an existing archive.

       add
              Update existing entries and add new files.  If the archive does not exist create it.  This is the default mode.

       update (-u)
              Update existing entries if newer on the file system and add new files.  If the archive does not exist issue  warn‐
              ing then create a new archive.

       freshen (-f)
              Update existing entries of an archive if newer on the file system.  Does not add new files to the archive.

       delete (-d)
              Select entries in an existing archive and delete them.

       copy (-U)
              Select entries in an existing archive and copy them to a new archive.  This new mode is similar to update but com‐
              mand line patterns select entries in the existing archive rather than files from the file system and it  uses  the
              --out  option  to  write  the resulting archive to a new file rather than update the existing archive, leaving the
              original archive unchanged.

       The new File Sync option (-FS) is also considered a new mode, though it is similar to update.  This mode synchronizes the
       archive  with the files on the OS, only replacing files in the archive if the file time or size of the OS file is differ‐
       ent, adding new files, and deleting entries from the archive where there is no matching file.  As this  mode  can  delete
       entries from the archive, consider making a backup copy of the archive.

       Also see -DF for creating difference archives.

       See each option description below for details and the EXAMPLES section below for examples.

       Split archives.   zip  version  3.0 and later can create split archives.  A split archive is a standard zip archive split
       over multiple files.  (Note that split archives are not just archives split in to pieces, as the offsets of  entries  are
       now  based  on  the  start of each split.  Concatenating the pieces together will invalidate these offsets, but unzip can
       usually deal with it.  zip will usually refuse to process such a spliced archive unless the -FF fix option is used to fix
       the offsets.)

       One  use  of  split  archives  is storing a large archive on multiple removable media.  For a split archive with 20 split
       files the files are typically named (replace ARCHIVE with the name of your archive) ARCHIVE.z01,  ARCHIVE.z02,  ...,  AR‐
       CHIVE.z19, ARCHIVE.zip.  Note that the last file is the .zip file.  In contrast, spanned archives are the original multi-
       disk archive generally requiring floppy disks and using volume labels to store disk numbers.  zip supports split archives
       but  not spanned archives, though a procedure exists for converting split archives of the right size to spanned archives.
       The reverse is also true, where each file of a spanned archive can be copied in order to files with the  above  names  to
       create a split archive.

       Use  -s  to set the split size and create a split archive.  The size is given as a number followed optionally by one of k
       (kB), m (MB), g (GB), or t (TB) (the default is m).  The -sp option can be used to pause  zip  between  splits  to  allow
       changing removable media, for example, but read the descriptions and warnings for both -s and -sp below.

       Though  zip  does  not  update split archives, zip provides the new option -O (--output-file or --out) to allow split ar‐
       chives to be updated and saved in a new archive.  For example,

              zip inarchive.zip foo.c bar.c --out outarchive.zip

       reads archive inarchive.zip, even if split, adds the files foo.c and bar.c, and writes  the  resulting  archive  to  out‐
       archive.zip.   If  inarchive.zip  is  split  then  outarchive.zip defaults to the same split size.  Be aware that if out‐
       archive.zip and any split files that are created with it already exist, these are always overwritten  as  needed  without
       warning.  This may be changed in the future.

       Unicode.   Though  the zip standard requires storing paths in an archive using a specific character set, in practice zips
       have stored paths in archives in whatever the local character set is.  This creates problems when an archive  is  created
       or  updated  on  a  system  using one character set and then extracted on another system using a different character set.
       When compiled with Unicode support enabled on platforms that support wide characters, zip now stores, in addition to  the
       standard  local  path  for  backward  compatibility, the UTF-8 translation of the path.  This provides a common universal
       character set for storing paths that allows these paths to be fully extracted on other systems that support  Unicode  and
       to match as close as possible on systems that don't.

       On  Win32  systems where paths are internally stored as Unicode but represented in the local character set, it's possible
       that some paths will be skipped during a local character set directory scan.  zip with Unicode support now can  read  and
       store these paths.  Note that Win 9x systems and FAT file systems don't fully support Unicode.

       Be  aware  that console windows on Win32 and Unix, for example, sometimes don't accurately show all characters due to how
       each operating system switches in character sets for display.  However, directory navigation tools should show  the  cor‐
       rect paths if the needed fonts are loaded.

       Command line format.  This version of zip has updated command line processing and support for long options.

       Short options take the form

              -s[-][s[-]...][value][=value][ value]

       where  s  is  a one or two character short option.  A short option that takes a value is last in an argument and anything
       after it is taken as the value.  If the option can be negated and "-" immediately  follows  the  option,  the  option  is
       negated.  Short options can also be given as separate arguments

              -s[-][value][=value][ value] -s[-][value][=value][ value] ...

       Short  options in general take values either as part of the same argument or as the following argument.  An optional = is
       also supported.  So

              -ttmmddyyyy

       and

              -tt=mmddyyyy

       and

              -tt mmddyyyy

       all work.  The -x and -i options accept lists of values and use a slightly different format described below.  See the  -x
       and -i options.

       Long options take the form

              --longoption[-][=value][ value]

       where  the  option  starts  with  --, has a multicharacter name, can include a trailing dash to negate the option (if the
       option supports it), and can have a value (option argument) specified by preceeding it with = (no  spaces).   Values  can
       also follow the argument.  So

              --before-date=mmddyyyy

       and

              --before-date mmddyyyy

       both work.

       Long option names can be shortened to the shortest unique abbreviation.  See the option descriptions below for which sup‐
       port long options.  To avoid confusion, avoid abbreviating a negatable option with an embedded dash ("-") at the dash  if
       you  plan  to negate it (the parser would consider a trailing dash, such as for the option --some-option using --some- as
       the option, as part of the name rather than a negating dash).  This may be changed to force the last dash in  --some-  to
       be negating in the future.

OPTIONS
       -a
       --ascii
              [Systems using EBCDIC] Translate file to ASCII format.


       -A
       --adjust-sfx
              Adjust  self-extracting executable archive.  A self-extracting executable archive is created by prepending the SFX
              stub to an existing archive. The -A option tells zip to adjust the entry offsets stored in  the  archive  to  take
              into account this "preamble" data.

       Note:  self-extracting  archives  for the Amiga are a special case.  At present, only the Amiga port of zip is capable of
       adjusting or updating these without corrupting them. -J can be used to remove the SFX stub if other updates  need  to  be
       made.


       -AC
       --archive-clear
              [WIN32]  Once archive is created (and tested if -T is used, which is recommended), clear the archive bits of files
              processed.  WARNING: Once the bits are cleared they are cleared.  You may want to use the -sf show files option to
              store  the  list  of  files processed in case the archive operation must be repeated.  Also consider using the -MM
              must match option.  Be sure to check out -DF as a possibly better way to do incremental backups.


       -AS
       --archive-set
              [WIN32]  Only include files that have the archive bit set.  Directories are not stored when -AS is used, though by
              default  the paths of entries, including directories, are stored as usual and can be used by most unzips to recre‐
              ate directories.

              The archive bit is set by the operating system when a file is modified and, if used with -AC, -AS can  provide  an
              incremental  backup  capability.  However, other applications can modify the archive bit and it may not be a reli‐
              able indicator of which files have changed since the last archive operation.  Alternative ways to create incremen‐
              tal  backups  are  using  -t  to  use  file  dates,  though this won't catch old files copied to directories being
              archived, and -DF to create a differential archive.


       -B
       --binary
              [VM/CMS and MVS] force file to be read binary (default is text).


       -Bn    [TANDEM] set Edit/Enscribe formatting options with n defined as
              bit  0: Don't add delimiter (Edit/Enscribe)
              bit  1: Use LF rather than CR/LF as delimiter (Edit/Enscribe)
              bit  2: Space fill record to maximum record length (Enscribe)
              bit  3: Trim trailing space (Enscribe)
              bit  8: Force 30K (Expand) large read for unstructured files


       -b path
       --temp-path path
              Use the specified path for the temporary zip archive. For example:

                     zip -b /tmp stuff *

              will put the temporary zip archive in the directory /tmp, copying over stuff.zip to  the  current  directory  when
              done. This option is useful when updating an existing archive and the file system containing this old archive does
              not have enough space to hold both old and new archives at the same time.  It may also be useful when streaming in
              some  cases  to  avoid the need for data descriptors.  Note that using this option may require zip take additional
              time to copy the archive file when done to the destination file system.


       -c
       --entry-comments
              Add one-line comments for each file.  File operations (adding, updating) are done first,  and  the  user  is  then
              prompted  for  a one-line comment for each file.  Enter the comment followed by return, or just return for no com‐
              ment.


       -C
       --preserve-case
              [VMS]  Preserve case all on VMS.  Negating this option (-C-) downcases.


       -C2
       --preserve-case-2
              [VMS]  Preserve case ODS2 on VMS.  Negating this option (-C2-) downcases.


       -C5
       --preserve-case-5
              [VMS]  Preserve case ODS5 on VMS.  Negating this option (-C5-) downcases.


       -d
       --delete
              Remove (delete) entries from a zip archive.  For example:

                     zip -d foo foo/tom/junk foo/harry/\* \*.o

              will remove the entry foo/tom/junk, all of the files that start with foo/harry/, and all of  the  files  that  end
              with  .o  (in  any path).  Note that shell pathname expansion has been inhibited with backslashes, so that zip can
              see the asterisks, enabling zip to match on the contents of the zip archive instead of the contents of the current
              directory.   (The backslashes are not used on MSDOS-based platforms.)  Can also use quotes to escape the asterisks
              as in

                     zip -d foo foo/tom/junk "foo/harry/*" "*.o"

              Not escaping the asterisks on a system where the shell expands wildcards could result in the asterisks being  con‐
              verted to a list of files in the current directory and that list used to delete entries from the archive.

              Under  MSDOS,  -d  is  case  sensitive when it matches names in the zip archive.  This requires that file names be
              entered in upper case if they were zipped by PKZIP on an MSDOS system.  (We considered making this  case  insensi‐
              tive  on  systems  where paths were case insensitive, but it is possible the archive came from a system where case
              does matter and the archive could include both Bar and bar as separate files in the archive.)   But  see  the  new
              option -ic to ignore case in the archive.


       -db
       --display-bytes
              Display running byte counts showing the bytes zipped and the bytes to go.


       -dc
       --display-counts
              Display running count of entries zipped and entries to go.


       -dd
       --display-dots
              Display  dots  while each entry is zipped (except on ports that have their own progress indicator).  See -ds below
              for setting dot size.  The default is a dot every 10 MB of input file processed.  The -v option also displays dots
              (previously at a much higher rate than this but now -v also defaults to 10 MB) and this rate is also controlled by
              -ds.


       -df
       --datafork
              [MacOS] Include only data-fork of files zipped into the archive.  Good for exporting files to  foreign  operating-
              systems.  Resource-forks will be ignored at all.


       -dg
       --display-globaldots
              Display progress dots for the archive instead of for each file.  The command

                         zip -qdgds 10m

              will turn off most output except dots every 10 MB.


       -ds size
       --dot-size size
              Set  amount  of  input  file  processed  for each dot displayed.  See -dd to enable displaying dots.  Setting this
              option implies -dd.  Size is in the format nm where n is a number and m is a multiplier.  Currently  m  can  be  k
              (KB), m (MB), g (GB), or t (TB), so if n is 100 and m is k, size would be 100k which is 100 KB.  The default is 10
              MB.

              The -v option also displays dots and now defaults to 10 MB also.  This rate is also controlled by this option.   A
              size of 0 turns dots off.

              This  option  does  not  control the dots from the "Scanning files" message as zip scans for input files.  The dot
              size for that is fixed at 2 seconds or a fixed number of entries, whichever is longer.


       -du
       --display-usize
              Display the uncompressed size of each entry.


       -dv
       --display-volume
              Display the volume (disk) number each entry is being read from, if reading an existing archive, and being  written
              to.


       -D
       --no-dir-entries
              Do  not create entries in the zip archive for directories.  Directory entries are created by default so that their
              attributes can be saved in the zip archive.  The environment variable ZIPOPT can be used  to  change  the  default
              options. For example under Unix with sh:

                     ZIPOPT="-D"; export ZIPOPT

              (The variable ZIPOPT can be used for any option, including -i and -x using a new option format detailed below, and
              can include several options.) The option -D is a shorthand for -x "*/" but the latter previously could not be  set
              as  default  in  the ZIPOPT environment variable as the contents of ZIPOPT gets inserted near the beginning of the
              command line and the file list had to end at the end of the line.

              This version of zip does allow -x and -i options in ZIPOPT if the form

               -x file file ... @

              is used, where the @ (an argument that is just @) terminates the list.


       -DF
       --difference-archive
              Create an archive that contains all new and changed files since the original archive was  created.   For  this  to
              work, the input file list and current directory must be the same as during the original zip operation.

              For example, if the existing archive was created using

                     zip -r foofull .

              from the bar directory, then the command

                     zip -r foofull . -DF --out foonew

              also  from the bar directory creates the archive foonew with just the files not in foofull and the files where the
              size or file time of the files do not match those in foofull.

              Note that the timezone environment variable TZ should be set according to the local timezone  in  order  for  this
              option  to  work  correctly.  A change in timezone since the original archive was created could result in no times
              matching and all files being included.

              A possible approach to backing up a directory might be to create a normal archive of the contents of the directory
              as a full backup, then use this option to create incremental backups.


       -e
       --encrypt
              Encrypt  the contents of the zip archive using a password which is entered on the terminal in response to a prompt
              (this will not be echoed; if standard error is not a tty, zip will exit with an error).  The  password  prompt  is
              repeated to save the user from typing errors.


       -E
       --longnames
              [OS/2] Use the .LONGNAME Extended Attribute (if found) as filename.


       -f
       --freshen
              Replace (freshen) an existing entry in the zip archive only if it has been modified more recently than the version
              already in the zip archive; unlike the update option (-u) this will not add files that are not already in the  zip
              archive.  For example:

                     zip -f foo

              This command should be run from the same directory from which the original zip command was run, since paths stored
              in zip archives are always relative.

              Note that the timezone environment variable TZ should be set according to the local timezone in order for the  -f,
              -u and -o options to work correctly.

              The reasons behind this are somewhat subtle but have to do with the differences between the Unix-format file times
              (always in GMT) and most of the other operating systems (always local time) and the necessity to compare the  two.
              A typical TZ value is ``MET-1MEST'' (Middle European time with automatic adjustment for ``summertime'' or Daylight
              Savings Time).

              The format is TTThhDDD, where TTT is the time zone such as MET, hh is the difference between GMT  and  local  time
              such as -1 above, and DDD is the time zone when daylight savings time is in effect.  Leave off the DDD if there is
              no daylight savings time.  For the US Eastern time zone EST5EDT.


       -F
       --fix
       -FF
       --fixfix
              Fix the zip archive. The -F option can be used if some portions of the archive are missing, but requires a reason‐
              ably  intact  central  directory.   The input archive is scanned as usual, but zip will ignore some problems.  The
              resulting archive should be valid, but any inconsistent entries will be left out.

              When doubled as in -FF, the archive is scanned from the beginning and zip scans for special signatures to identify
              the  limits between the archive members. The single -F is more reliable if the archive is not too much damaged, so
              try this option first.

              If the archive is too damaged or the end has been truncated, you must use -FF.  This is a  change  from  zip 2.32,
              where  the  -F  option  is  able to read a truncated archive.  The -F option now more reliably fixes archives with
              minor damage and the -FF option is needed to fix archives where -F might have been sufficient before.

              Neither option will recover archives that have been incorrectly transferred in ascii mode instead of binary. After
              the  repair,  the  -t option of unzip may show that some files have a bad CRC. Such files cannot be recovered; you
              can remove them from the archive using the -d option of zip.

              Note that -FF may have trouble fixing archives that include an embedded zip archive that was stored (without  com‐
              pression) in the archive and, depending on the damage, it may find the entries in the embedded archive rather than
              the archive itself.  Try -F first as it does not have this problem.

              The format of the fix commands have changed.  For example, to fix the damaged archive foo.zip,

                     zip -F foo --out foofix

              tries to read the entries normally, copying good entries to the new archive foofix.zip.  If this doesn't work,  as
              when the archive is truncated, or if some entries you know are in the archive are missed, then try

                     zip -FF foo --out foofixfix

              and  compare  the  resulting  archive to the archive created by -F.  The -FF option may create an inconsistent ar‐
              chive.  Depending on what is damaged, you can then use the -F option to fix that archive.

              A split archive with missing split files can be fixed using -F if you have the last split of the archive (the .zip
              file).   If  this  file  is missing, you must use -FF to fix the archive, which will prompt you for the splits you
              have.

              Currently the fix options can't recover entries that have a bad checksum or are otherwise damaged.


       -FI
       --fifo [Unix]  Normally zip skips reading any FIFOs (named pipes) encountered, as zip can hang if the FIFO is  not  being
              fed.  This option tells zip to read the contents of any FIFO it finds.


       -FS
       --filesync
              Synchronize  the  contents of an archive with the files on the OS.  Normally when an archive is updated, new files
              are added and changed files are updated but files that no longer exist on the OS are not deleted from the archive.
              This  option  enables a new mode that checks entries in the archive against the file system.  If the file time and
              file size of the entry matches that of the OS file, the entry is copied from the old archive instead of being read
              from  the  file system and compressed.  If the OS file has changed, the entry is read and compressed as usual.  If
              the entry in the archive does not match a file on the OS, the entry is deleted.  Enabling this option should  cre‐
              ate  archives  that  are  the  same  as new archives, but since existing entries are copied instead of compressed,
              updating an existing archive with -FS can be much faster than creating a new archive.  Also consider using -u  for
              updating an archive.

              For  this  option to work, the archive should be updated from the same directory it was created in so the relative
              paths match.  If few files are being copied from the old archive, it  may  be  faster  to  create  a  new  archive
              instead.

              Note  that  the  timezone  environment variable TZ should be set according to the local timezone in order for this
              option to work correctly.  A change in timezone since the original archive was created could result  in  no  times
              matching and recompression of all files.

              This  option deletes files from the archive.  If you need to preserve the original archive, make a copy of the ar‐
              chive first or use the --out option to output the updated archive to a new file.  Even though it  may  be  slower,
              creating  a  new  archive with a new archive name is safer, avoids mismatches between archive and OS paths, and is
              preferred.


       -g
       --grow
              Grow (append to) the specified zip archive, instead of creating a new one. If this operation fails,  zip  attempts
              to  restore  the archive to its original state. If the restoration fails, the archive might become corrupted. This
              option is ignored when there's no existing archive or when at least one archive member must be updated or deleted.


       -h
       -?
       --help
              Display the zip help information (this also appears if zip is run with no arguments).


       -h2
       --more-help
              Display extended help including more on command line format, pattern matching, and more obscure options.


       -i files
       --include files
              Include only the specified files, as in:

                     zip -r foo . -i \*.c

              which will include only the files that end in .c in the current directory and its subdirectories. (Note for  PKZIP
              users: the equivalent command is

                     pkzip -rP foo *.c

              PKZIP  does  not allow recursion in directories other than the current one.)  The backslash avoids the shell file‐
              name substitution, so that the name matching is performed by zip at all directory levels.  [This is for  Unix  and
              other  systems  where  \  escapes the next character.  For other systems where the shell does not process * do not
              use \ and the above is

                     zip -r foo . -i *.c

              Examples are for Unix unless otherwise specified.]  So to include dir, a  directory  directly  under  the  current
              directory, use

                     zip -r foo . -i dir/\*

              or

                     zip -r foo . -i "dir/*"

              to  match paths such as dir/a and dir/b/file.c [on ports without wildcard expansion in the shell such as MSDOS and
              Windows

                     zip -r foo . -i dir/*

              is used.]  Note that currently the trailing / is needed for directories (as in

                     zip -r foo . -i dir/

              to include directory dir).

              The long option form of the first example is

                     zip -r foo . --include \*.c

              and does the same thing as the short option form.

              Though the command syntax used to require -i at the end of the command line, this version actually allows  -i  (or
              --include)  anywhere.   The  list of files terminates at the next argument starting with -, the end of the command
              line, or the list terminator @ (an argument that is just @).  So the above can be given as

                     zip -i \*.c @ -r foo .

              for example.  There must be a space between the option and the first file of a list.  For just one  file  you  can
              use the single value form

                     zip -i\*.c -r foo .

              (no space between option and value) or

                     zip --include=\*.c -r foo .

              as additional examples.  The single value forms are not recommended because they can be confusing and, in particu‐
              lar, the -ifile format can cause problems if the first letter of file combines with i to form a two-letter  option
              starting with i.  Use -sc to see how your command line will be parsed.

              Also possible:

                     zip -r foo  . -i@include.lst

              which  will  only include the files in the current directory and its subdirectories that match the patterns in the
              file include.lst.

              Files to -i and -x are patterns matching internal archive paths.  See -R for more on patterns.


       -I
       --no-image
              [Acorn RISC OS] Don't scan through Image files.  When used, zip will not consider Image files (eg. DOS  partitions
              or Spark archives when SparkFS is loaded) as directories but will store them as single files.

              For  example,  if you have SparkFS loaded, zipping a Spark archive will result in a zipfile containing a directory
              (and its content) while using the 'I' option will result in a zipfile containing a Spark archive.  Obviously  this
              second case will also be obtained (without the 'I' option) if SparkFS isn't loaded.


       -ic
       --ignore-case
              [VMS,  WIN32]  Ignore case when matching archive entries.  This option is only available on systems where the case
              of files is ignored.  On systems with case-insensitive file systems, case is normally ignored when matching  files
              on  the  file  system but is not ignored for -f (freshen), -d (delete), -U (copy), and similar modes when matching
              against archive entries (currently -f ignores case on VMS) because archive entries can be from systems where  case
              does  matter and names that are the same except for case can exist in an archive.  The -ic option makes all match‐
              ing case insensitive.  This can result in multiple archive entries matching a command line pattern.


       -j
       --junk-paths
              Store just the name of a saved file (junk the path), and do not store directory names. By default, zip will  store
              the full path (relative to the current directory).


       -jj
       --absolute-path
              [MacOS]  record  Fullpath  (+ Volname). The complete path including volume will be stored. By default the relative
              path will be stored.


       -J
       --junk-sfx
              Strip any prepended data (e.g. a SFX stub) from the archive.

       -k
       --DOS-names
              Attempt to convert the names and paths to conform to MSDOS, store only the MSDOS attribute (just  the  user  write
              attribute  from  Unix),  and  mark  the entry as made under MSDOS (even though it was not); for compatibility with
              PKUNZIP under MSDOS which cannot handle certain names such as those with two dots.

       -l
       --to-crlf
              Translate the Unix end-of-line character LF into the MSDOS convention CR LF. This option should  not  be  used  on
              binary  files.   This option can be used on Unix if the zip file is intended for PKUNZIP under MSDOS. If the input
              files already contain CR LF, this option adds an extra CR. This is to ensure that unzip -a on Unix will  get  back
              an exact copy of the original file, to undo the effect of zip -l.  See -ll for how binary files are handled.

       -la
       --log-append
              Append to existing logfile.  Default is to overwrite.

       -lf logfilepath
       --logfile-path logfilepath
              Open  a  logfile  at  the  given  path.  By default any existing file at that location is overwritten, but the -la
              option will result in an existing file being opened and the new log information appended to any existing  informa‐
              tion.   Only  warnings and errors are written to the log unless the -li option is also given, then all information
              messages are also written to the log.

       -li
       --log-info
              Include information messages, such as file names being zipped, in the log.  The default is  to  only  include  the
              command line, any warnings and errors, and the final status.

       -ll
       --from-crlf
              Translate  the MSDOS end-of-line CR LF into Unix LF.  This option should not be used on binary files.  This option
              can be used on MSDOS if the zip file is intended for unzip under Unix.  If the file is converted and the  file  is
              later  determined  to  be  binary  a warning is issued and the file is probably corrupted.  In this release if -ll
              detects binary in the first buffer read from a file, zip now issues a warning and skips line end conversion on the
              file.   This  check seems to catch all binary files tested, but the original check remains and if a converted file
              is later determined to be binary that warning is still issued.  A new algorithm  is  now  being  used  for  binary
              detection that should allow line end conversion of text files in UTF-8 and similar encodings.

       -L
       --license
              Display the zip license.

       -m
       --move
              Move  the  specified  files into the zip archive; actually, this deletes the target directories/files after making
              the specified zip archive. If a directory becomes empty after removal of the files, the directory is also removed.
              No  deletions are done until zip has created the archive without error.  This is useful for conserving disk space,
              but is potentially dangerous so it is recommended to use it in combination with -T  to  test  the  archive  before
              removing all input files.

       -MM
       --must-match
              All  input  patterns  must  match  at least one file and all input files found must be readable.  Normally when an
              input pattern does not match a file the "name not matched" warning is issued and when an input file has been found
              but  later  is  missing or not readable a missing or not readable warning is issued.  In either case zip continues
              creating the archive, with missing or unreadable new files being skipped and files already in the archive  remain‐
              ing  unchanged.   After the archive is created, if any files were not readable zip returns the OPEN error code (18
              on most systems) instead of the normal success return (0 on most systems).  With -MM set, zip exits as soon as  an
              input  pattern  is  not matched (whenever the "name not matched" warning would be issued) or when an input file is
              not readable.  In either case zip exits with an OPEN error and no archive is created.

              This option is useful when a known list of files is to be zipped so any missing or unreadable files will result in
              an  error.  It is less useful when used with wildcards, but zip will still exit with an error if any input pattern
              doesn't match at least one file and if any matched files are unreadable.  If you want to create the archive anyway
              and only need to know if files were skipped, don't use -MM and just check the return code.  Also -lf could be use‐
              ful.

       -n suffixes
       --suffixes suffixes
              Do not attempt to compress files named with the given suffixes.  Such files are simply stored (0% compression)  in
              the  output  zip  file, so that zip doesn't waste its time trying to compress them.  The suffixes are separated by
              either colons or semicolons.  For example:

                     zip -rn .Z:.zip:.tiff:.gif:.snd  foo foo

              will copy everything from foo into foo.zip, but will store any files that end in .Z, .zip, .tiff,  .gif,  or  .snd
              without  trying to compress them (image and sound files often have their own specialized compression methods).  By
              default, zip does not compress files with extensions in the  list  .Z:.zip:.zoo:.arc:.lzh:.arj.   Such  files  are
              stored directly in the output archive.  The environment variable ZIPOPT can be used to change the default options.
              For example under Unix with csh:

                     setenv ZIPOPT "-n .gif:.zip"

              To attempt compression on all files, use:

                     zip -n : foo

              The maximum compression option -9 also attempts compression on all files regardless of extension.

              On Acorn RISC OS systems the suffixes are actually filetypes (3 hex digit format). By default, zip does  not  com‐
              press files with filetypes in the list DDC:D96:68E (i.e. Archives, CFS files and PackDir files).

       -nw
       --no-wild
              Do  not  perform internal wildcard processing (shell processing of wildcards is still done by the shell unless the
              arguments are escaped).  Useful if a list of paths is being read and no wildcard substitution is desired.

       -N
       --notes
              [Amiga, MacOS] Save Amiga or MacOS filenotes as zipfile comments. They can be restored by using the -N  option  of
              unzip. If -c is used also, you are prompted for comments only for those files that do not have filenotes.

       -o
       --latest-time
              Set  the  "last  modified"  time  of  the  zip archive to the latest (oldest) "last modified" time found among the
              entries in the zip archive.  This can be used without any other operations, if desired.  For example:

              zip -o foo

              will change the last modified time of foo.zip to the latest time of the entries in foo.zip.

       -O output-file
       --output-file output-file
              Process the archive changes as usual, but instead of updating the existing archive, output the new archive to out‐
              put-file.   Useful  for  updating an archive without changing the existing archive and the input archive must be a
              different file than the output archive.

              This option can be used to create updated split archives.  It can also be used with -U to  copy  entries  from  an
              existing archive to a new archive.  See the EXAMPLES section below.

              Another  use is converting zip files from one split size to another.  For instance, to convert an archive with 700
              MB CD splits to one with 2 GB DVD splits, can use:

                     zip -s 2g cd-split.zip --out dvd-split.zip

              which uses copy mode.  See -U below.  Also:

                     zip -s 0 split.zip --out unsplit.zip

              will convert a split archive to a single-file archive.

              Copy mode will convert stream entries (using data descriptors and which should be compatible with most unzips)  to
              normal entries (which should be compatible with all unzips), except if standard encryption was used.  For archives
              with encrypted entries, zipcloak will decrypt the entries and convert them to normal entries.

       -p
       --paths
              Include relative file paths as part of the names of files stored in the archive.  This is  the  default.   The  -j
              option junks the paths and just stores the names of the files.

       -P password
       --password password
              Use  password  to  encrypt zipfile entries (if any).  THIS IS INSECURE!  Many multi-user operating systems provide
              ways for any user to see the current command line of any other user; even on stand-alone systems there  is  always
              the threat of over-the-shoulder peeking.  Storing the plaintext password as part of a command line in an automated
              script is even worse.  Whenever possible, use the non-echoing, interactive prompt to enter passwords.  (And  where
              security  is  truly  important,  use  strong encryption such as Pretty Good Privacy instead of the relatively weak
              standard encryption provided by zipfile utilities.)

       -q
       --quiet
              Quiet mode; eliminate informational messages and comment prompts.  (Useful, for  example,  in  shell  scripts  and
              background tasks).

       -Qn
       --Q-flag n
              [QDOS] store information about the file in the file header with n defined as
              bit  0: Don't add headers for any file
              bit  1: Add headers for all files
              bit  2: Don't wait for interactive key press on exit

       -r
       --recurse-paths
              Travel the directory structure recursively; for example:

                     zip -r foo.zip foo

              or more concisely

                     zip -r foo foo

              In  this case, all the files and directories in foo are saved in a zip archive named foo.zip, including files with
              names starting with ".", since the recursion does not use the shell's file-name substitution  mechanism.   If  you
              wish  to include only a specific subset of the files in directory foo and its subdirectories, use the -i option to
              specify the pattern of files to be included.  You should not use -r with the name ".*", since  that  matches  ".."
              which will attempt to zip up the parent directory (probably not what was intended).

              Multiple source directories are allowed as in

                     zip -r foo foo1 foo2

              which first zips up foo1 and then foo2, going down each directory.

              Note  that  while  wildcards to -r are typically resolved while recursing down directories in the file system, any
              -R, -x, and -i wildcards are applied to internal archive pathnames once the  directories  are  scanned.   To  have
              wildcards  apply  to files in subdirectories when recursing on Unix and similar systems where the shell does wild‐
              card substitution, either escape all wildcards or put all arguments with wildcards in quotes.  This lets  zip  see
              the wildcards and match files in subdirectories using them as it recurses.

       -R
       --recurse-patterns
              Travel the directory structure recursively starting at the current directory; for example:

                     zip -R foo "*.c"

              In  this  case, all the files matching *.c in the tree starting at the current directory are stored into a zip ar‐
              chive named foo.zip.  Note that *.c will match file.c, a/file.c and a/b/.c.  More than one pattern can  be  listed
              as separate arguments.  Note for PKZIP users: the equivalent command is

                     pkzip -rP foo *.c

              Patterns are relative file paths as they appear in the archive, or will after zipping, and can have optional wild‐
              cards in them.  For example, given the current directory is foo and under it are directories foo1 and foo2 and  in
              foo1 is the file bar.c,

                     zip -R foo/*

              will zip up foo, foo/foo1, foo/foo1/bar.c, and foo/foo2.

                     zip -R */bar.c

              will zip up foo/foo1/bar.c.  See the note for -r on escaping wildcards.


       -RE
       --regex
              [WIN32]  Before zip 3.0, regular expression list matching was enabled by default on Windows platforms.  Because of
              confusion resulting from the need to escape "[" and "]" in names, it is now off by default for Windows so "["  and
              "]" are just normal characters in names.  This option enables [] matching again.


       -s splitsize
       --split-size splitsize
              Enable  creating  a  split archive and set the split size.  A split archive is an archive that could be split over
              many files.  As the archive is created, if the size of the archive reaches the specified split size, that split is
              closed  and the next split opened.  In general all splits but the last will be the split size and the last will be
              whatever is left.  If the entire archive is smaller than the split size a single-file archive is created.

              Split archives are stored in numbered files.  For example, if the output archive is named archive and three splits
              are  required, the resulting archive will be in the three files archive.z01, archive.z02, and archive.zip.  Do not
              change the numbering of these files or the archive will not be readable as these are used to determine  the  order
              the splits are read.

              Split  size is a number optionally followed by a multiplier.  Currently the number must be an integer.  The multi‐
              plier can currently be one of k (kilobytes), m (megabytes), g (gigabytes), or t (terabytes).  As 64k is the  mini‐
              mum  split  size, numbers without multipliers default to megabytes.  For example, to create a split archive called
              foo with the contents of the bar directory with splits of 670 MB that might be useful for burning on CDs, the com‐
              mand:

                     zip -s 670m -r foo bar

              could be used.

              Currently  the  old  splits  of  a split archive are not excluded from a new archive, but they can be specifically
              excluded.  If possible, keep the input and output archives out of the path being zipped when  creating  split  ar‐
              chives.

              Using  -s  without -sp as above creates all the splits where foo is being written, in this case the current direc‐
              tory.  This split mode updates the splits as the  archive  is  being  created,  requiring  all  splits  to  remain
              writable,  but  creates split archives that are readable by any unzip that supports split archives.  See -sp below
              for enabling split pause mode which allows splits to be written directly to removable media.

              The option -sv can be used to enable verbose splitting and provide details of how the  splitting  is  being  done.
              The -sb option can be used to ring the bell when zip pauses for the next split destination.

              Split  archives  cannot  be updated, but see the -O (--out) option for how a split archive can be updated as it is
              copied to a new archive.  A split archive can also be converted into a single-file archive using a split size of 0
              or negating the -s option:

                     zip -s 0 split.zip --out single.zip

              Also see -U (--copy) for more on using copy mode.

       -sb
       --split-bell
              If splitting and using split pause mode, ring the bell when zip pauses for each split destination.

       -sc
       --show-command
              Show  the command line starting zip as processed and exit.  The new command parser permutes the arguments, putting
              all options and any values associated with them before any non-option arguments.  This allows an option to  appear
              anywhere  in  the command line as long as any values that go with the option go with it.  This option displays the
              command line as zip sees it, including any arguments from the environment such as from the ZIPOPT variable.  Where
              allowed, options later in the command line can override options earlier in the command line.

       -sf
       --show-files
              Show  the files that would be operated on, then exit.  For instance, if creating a new archive, this will list the
              files that would be added.  If the option is negated, -sf-, output only to an open log file.   Screen  display  is
              not recommended for large lists.

       -so
       --show-options
              Show  all  available options supported by zip as compiled on the current system.  As this command reads the option
              table, it should include all options.  Each line includes the short option  (if  defined),  the  long  option  (if
              defined),  the  format  of any value that goes with the option, if the option can be negated, and a small descrip‐
              tion.  The value format can be no value, required value, optional value, single character value, number value,  or
              a  list  of  values.   The  output of this option is not intended to show how to use any option but only show what
              options are available.

       -sp
       --split-pause
              If splitting is enabled with -s, enable split pause mode.  This creates split archives  as  -s  does,  but  stream
              writing  is  used  so  each  split can be closed as soon as it is written and zip will pause between each split to
              allow changing split destination or media.

              Though this split mode allows writing splits directly to removable media, it uses stream archive format  that  may
              not  be  readable  by some unzips.  Before relying on splits created with -sp, test a split archive with the unzip
              you will be using.

              To convert a stream split archive (created with -sp) to a standard archive see the --out option.

       -su
       --show-unicode
              As -sf, but also show Unicode version of the path if exists.

       -sU
       --show-just-unicode
              As -sf, but only show Unicode version of the path if exists, otherwise show the standard version of the path.

       -sv
       --split-verbose
              Enable various verbose messages while splitting, showing how the splitting is being done.

       -S
       --system-hidden
              [MSDOS, OS/2, WIN32 and ATARI] Include system and hidden files.
              [MacOS] Includes finder invisible files, which are ignored otherwise.

       -t mmddyyyy
       --from-date mmddyyyy
              Do not operate on files modified prior to the specified date, where mm is the month (00-12), dd is the day of  the
              month (01-31), and yyyy is the year.  The ISO 8601 date format yyyy-mm-dd is also accepted.  For example:

                     zip -rt 12071991 infamy foo

                     zip -rt 1991-12-07 infamy foo

              will  add  all the files in foo and its subdirectories that were last modified on or after 7 December 1991, to the
              zip archive infamy.zip.

       -tt mmddyyyy
       --before-date mmddyyyy
              Do not operate on files modified after or at the specified date, where mm is the month (00-12), dd is the  day  of
              the month (01-31), and yyyy is the year.  The ISO 8601 date format yyyy-mm-dd is also accepted.  For example:

                     zip -rtt 11301995 infamy foo

                     zip -rtt 1995-11-30 infamy foo

              will  add  all the files in foo and its subdirectories that were last modified before 30 November 1995, to the zip
              archive infamy.zip.

       -T
       --test
              Test the integrity of the new zip file. If the check fails, the old zip file is unchanged and (with the -m option)
              no input files are removed.

       -TT cmd
       --unzip-command cmd
              Use  command cmd instead of 'unzip -tqq' to test an archive when the -T option is used.  On Unix, to use a copy of
              unzip in the current directory instead of the standard system unzip, could use:

               zip archive file1 file2 -T -TT "./unzip -tqq"

              In cmd, {} is replaced by the name of the temporary archive, otherwise the name of the archive is appended to  the
              end of the command.  The return code is checked for success (0 on Unix).

       -u
       --update
              Replace  (update) an existing entry in the zip archive only if it has been modified more recently than the version
              already in the zip archive.  For example:

                     zip -u stuff *

              will add any new files in the current directory, and update any files which have been modified since the  zip  ar‐
              chive  stuff.zip  was  last created/modified (note that zip will not try to pack stuff.zip into itself when you do
              this).

              Note that the -u option with no input file arguments acts like the -f (freshen) option.

       -U
       --copy-entries
              Copy entries from one archive to another.  Requires the --out option to specify a different output file  than  the
              input archive.  Copy mode is the reverse of -d delete.  When delete is being used with --out, the selected entries
              are deleted from the archive and all other entries are copied to the new archive,  while  copy  mode  selects  the
              files to include in the new archive.  Unlike -u update, input patterns on the command line are matched against ar‐
              chive entries only and not the file system files.  For instance,

                     zip inarchive "*.c" --copy --out outarchive

              copies entries with names ending in .c from inarchive to outarchive.  The wildcard must be escaped on some systems
              to  prevent  the  shell  from  substituting names of files from the file system which may have no relevance to the
              entries in the archive.

              If no input files appear on the command line and --out is used, copy mode is assumed:

                     zip inarchive --out outarchive

              This is useful for changing split size for instance.  Encrypting and decrypting entries is not yet supported using
              copy mode.  Use zipcloak for that.

       -UN v
       --unicode v
              Determine  what  zip  should  do  with  Unicode  file  names.  zip 3.0, in addition to the standard file path, now
              includes the UTF-8 translation of the path if the entry path is not entirely 7-bit ASCII.  When an entry is  miss‐
              ing  the  Unicode  path,  zip reverts back to the standard file path.  The problem with using the standard path is
              this path is in the local character set of the zip that created the entry, which may contain characters  that  are
              not  valid  in  the character set being used by the unzip.  When zip is reading an archive, if an entry also has a
              Unicode path, zip now defaults to using the Unicode path to recreate the standard path  using  the  current  local
              character set.

              This  option  can be used to determine what zip should do with this path if there is a mismatch between the stored
              standard path and the stored UTF-8 path (which can happen if the standard path was updated).   In  all  cases,  if
              there is a mismatch it is assumed that the standard path is more current and zip uses that.  Values for v are

                     q - quit if paths do not match

                     w - warn, continue with standard path

                     i - ignore, continue with standard path

                     n - no Unicode, do not use Unicode paths

              The default is to warn and continue.

              Characters that are not valid in the current character set are escaped as #Uxxxx and #Lxxxxxx, where x is an ASCII
              character for a hex digit.  The first is used if a 16-bit character number is sufficient to represent the  Unicode
              character  and the second if the character needs more than 16 bits to represent it's Unicode character code.  Set‐
              ting -UN to

                     e - escape

              as in

                     zip archive -sU -UN=e

              forces zip to escape all characters that are not printable 7-bit ASCII.

              Normally zip stores UTF-8 directly in the standard path field on systems where UTF-8 is the current character  set
              and stores the UTF-8 in the new extra fields otherwise.  The option

                     u - UTF-8

              as in

                     zip archive dir -r -UN=UTF8

              forces  zip to store UTF-8 as native in the archive.  Note that storing UTF-8 directly is the default on Unix sys‐
              tems that support it.  This option could be useful on Windows systems where the escaped path is too large to be  a
              valid  path  and  the UTF-8 version of the path is smaller, but native UTF-8 is not backward compatible on Windows
              systems.


       -v
       --verbose
              Verbose mode or print diagnostic version info.

              Normally, when applied to real operations, this option enables the display of a progress indicator during compres‐
              sion (see -dd for more on dots) and requests verbose diagnostic info about zipfile structure oddities.

              However,  when  -v is the only command line argument a diagnostic screen is printed instead.  This should now work
              even if stdout is redirected to a file, allowing easy saving of the information for sending with  bug  reports  to
              Info-ZIP.   The  version screen provides the help screen header with program name, version, and release date, some
              pointers to the Info-ZIP home and distribution sites, and shows information about the target environment (compiler
              type  and  version,  OS  version,  compilation  date and the enabled optional features used to create the zip exe‐
              cutable).

       -V
       --VMS-portable
              [VMS] Save VMS file attributes.  (Files are  truncated at EOF.)   When a -V archive is unpacked on a non-VMS  sys‐
              tem,   some  file types (notably Stream_LF text files  and  pure binary files  like fixed-512) should be extracted
              intact.  Indexed files and file types with embedded record sizes (notably variable-length record types) will prob‐
              ably be seen as corrupt elsewhere.

       -VV
       --VMS-specific
              [VMS] Save VMS file attributes, and  all allocated blocks in a file,  including  any  data beyond EOF.  Useful for
              moving ill-formed files  among  VMS systems.   When a -VV archive is unpacked on  a  non-VMS  system,  almost  all
              files will appear corrupt.

       -w
       --VMS-versions
              [VMS] Append the version number of the files to the name, including multiple versions of files.  Default is to use
              only the most recent version of a specified file.

       -ww
       --VMS-dot-versions
              [VMS] Append the version number of the files to the name, including multiple versions of  files,  using  the  .nnn
              format.  Default is to use only the most recent version of a specified file.

       -ws
       --wild-stop-dirs
              Wildcards match only at a directory level.  Normally zip handles paths as strings and given the paths

                     /foo/bar/dir/file1.c

                     /foo/bar/file2.c

              an input pattern such as

                     /foo/bar/*

              normally  would match both paths, the * matching dir/file1.c and file2.c.  Note that in the first case a directory
              boundary (/) was crossed in the match.  With -ws no directory bounds will be included in the match,  making  wild‐
              cards local to a specific directory level.  So, with -ws enabled, only the second path would be matched.

              When using -ws, use ** to match across directory boundaries as * does normally.

       -x files
       --exclude files
              Explicitly exclude the specified files, as in:

                     zip -r foo foo -x \*.o

              which  will  include  the  contents of foo in foo.zip while excluding all the files that end in .o.  The backslash
              avoids the shell filename substitution, so that the name matching is performed by zip at all directory levels.

              Also possible:

                     zip -r foo foo -x@exclude.lst

              which will include the contents of foo in foo.zip while excluding all the files that match  the  patterns  in  the
              file exclude.lst.

              The long option forms of the above are

                     zip -r foo foo --exclude \*.o

              and

                     zip -r foo foo --exclude @exclude.lst

              Multiple patterns can be specified, as in:

                     zip -r foo foo -x \*.o \*.c

              If there is no space between -x and the pattern, just one value is assumed (no list):

                     zip -r foo foo -x\*.o

              See -i for more on include and exclude.

       -X
       --no-extra
              Do  not  save extra file attributes (Extended Attributes on OS/2, uid/gid and file times on Unix).  The zip format
              uses extra fields to include additional information for each entry.  Some extra fields are specific to  particular
              systems  while others are applicable to all systems.  Normally when zip reads entries from an existing archive, it
              reads the extra fields it knows, strips the rest, and adds the extra fields applicable to that system.   With  -X,
              zip  strips  all old fields and only includes the Unicode and Zip64 extra fields (currently these two extra fields
              cannot be disabled).

              Negating this option, -X-, includes all the default extra fields, but also  copies  over  any  unrecognized  extra
              fields.

       -y
       --symlinks
              For  UNIX  and  VMS  (V8.3 and later), store symbolic links as such in the zip archive, instead of compressing and
              storing the file referred to by the link.  This can avoid multiple copies of files being included in  the  archive
              as zip recurses the directory trees and accesses files directly and by links.

       -z
       --archive-comment
              Prompt  for  a  multi-line  comment  for the entire zip archive.  The comment is ended by a line containing just a
              period, or an end of file condition (^D on Unix, ^Z on MSDOS, OS/2, and VMS).  The comment can  be  taken  from  a
              file:

                     zip -z foo < foowhat

       -Z cm
       --compression-method cm
              Set  the default compression method.  Currently the main methods supported by zip are store and deflate.  Compres‐
              sion method can be set to:

              store - Setting the compression method to store forces zip to store entries with no compression.  This  is  gener‐
              ally  faster than compressing entries, but results in no space savings.  This is the same as using -0 (compression
              level zero).

              deflate - This is the default method for zip.  If zip determines that storing is better than deflation, the  entry
              will be stored instead.

              bzip2  - If bzip2 support is compiled in, this compression method also becomes available.  Only some modern unzips
              currently support the bzip2 compression method, so test the unzip you will be using  before  relying  on  archives
              using this method (compression method 12).

              For example, to add bar.c to archive foo using bzip2 compression:

                     zip -Z bzip2 foo bar.c

              The compression method can be abbreviated:

                     zip -Zb foo bar.c

       -#
       (-0, -1, -2, -3, -4, -5, -6, -7, -8, -9)
              Regulate  the  speed  of  compression  using  the  specified digit #, where -0 indicates no compression (store all
              files), -1 indicates the fastest compression speed (less compression) and -9  indicates  the  slowest  compression
              speed (optimal compression, ignores the suffix list). The default compression level is -6.

              Though  still being worked, the intention is this setting will control compression speed for all compression meth‐
              ods.  Currently only deflation is controlled.

       -!
       --use-privileges
              [WIN32] Use priviliges (if granted) to obtain all aspects of WinNT security.

       -@
       --names-stdin
              Take the list of input files from standard input. Only one filename per line.

       -$
       --volume-label
              [MSDOS, OS/2, WIN32] Include the volume label for the drive holding the first file to be compressed.  If you  want
              to include only the volume label or to force a specific drive, use the drive name as first file name, as in:

                     zip -$ foo a: c:bar

EXAMPLES
       The simplest example:

              zip stuff *

       creates the archive stuff.zip (assuming it does not exist) and puts all the files in the current directory in it, in com‐
       pressed form (the .zip suffix is added automatically, unless the archive name contains a dot  already;  this  allows  the
       explicit specification of other suffixes).

       Because  of  the  way  the shell on Unix does filename substitution, files starting with "." are not included; to include
       these as well:

              zip stuff .* *

       Even this will not include any subdirectories from the current directory.

       To zip up an entire directory, the command:

              zip -r foo foo

       creates the archive foo.zip, containing all the files and directories in the directory foo that is contained  within  the
       current directory.

       You  may  want  to make a zip archive that contains the files in foo, without recording the directory name, foo.  You can
       use the -j option to leave off the paths, as in:

              zip -j foo foo/*

       If you are short on disk space, you might not have enough room to hold both the original directory and the  corresponding
       compressed zip archive.  In this case, you can create the archive in steps using the -m option.  If foo contains the sub‐
       directories tom, dick, and harry, you can:

              zip -rm foo foo/tom
              zip -rm foo foo/dick
              zip -rm foo foo/harry

       where the first command creates foo.zip, and the next two add to it.  At the completion of each  zip  command,  the  last
       created archive is deleted, making room for the next zip command to function.




       Use  -s  to set the split size and create a split archive.  The size is given as a number followed optionally by one of k
       (kB), m (MB), g (GB), or t (TB).  The command

              zip -s 2g -r split.zip foo

       creates a split archive of the directory foo with splits no bigger than 2 GB each.  If foo contained 5 GB of contents and
       the  contents were stored in the split archive without compression (to make this example simple), this would create three
       splits, split.z01 at 2 GB, split.z02 at 2 GB, and split.zip at a little over 1 GB.

       The -sp option can be used to pause zip between splits to allow changing removable  media,  for  example,  but  read  the
       descriptions and warnings for both -s and -sp below.

       Though  zip  does not update split archives, zip provides the new option -O (--output-file) to allow split archives to be
       updated and saved in a new archive.  For example,

              zip inarchive.zip foo.c bar.c --out outarchive.zip

       reads archive inarchive.zip, even if split, adds the files foo.c and bar.c, and writes  the  resulting  archive  to  out‐
       archive.zip.   If  inarchive.zip  is  split  then  outarchive.zip  defaults  to  the same split size.  Be aware that out‐
       archive.zip and any split files that are created with it are always overwritten without warning.  This may be changed  in
       the future.





PATTERN MATCHING
       This  section applies only to Unix.  Watch this space for details on MSDOS and VMS operation.  However, the special wild‐
       card characters * and [] below apply to at least MSDOS also.

       The Unix shells (sh, csh, bash, and others) normally do filename substitution (also called "globbing") on  command  argu‐
       ments.  Generally the special characters are:

       ?      match any single character

       *      match any number of characters (including none)

       []     match  any  character  in  the range indicated within the brackets (example: [a-f], [0-9]).  This form of wildcard
              matching allows a user to specify a list of characters between square brackets and if any of the characters  match
              the expression matches.  For example:

                     zip archive "*.[hc]"

              would archive all files in the current directory that end in .h or .c.

              Ranges of characters are supported:

                     zip archive "[a-f]*"

              would add to the archive all files starting with "a" through "f".

              Negation  is  also supported, where any character in that position not in the list matches.  Negation is supported
              by adding ! or ^ to the beginning of the list:

                     zip archive "*.[!o]"

              matches files that don't end in ".o".

              On WIN32, [] matching needs to be turned on with the -RE option to avoid the confusion that names with [ or ] have
              caused.


       When  these  characters are encountered (without being escaped with a backslash or quotes), the shell will look for files
       relative to the current path that match the pattern, and replace the argument with a list of the names that matched.

       The zip program can do the same matching on names that are in the zip archive being modified or, in the case  of  the  -x
       (exclude)  or  -i  (include)  options, on the list of files to be operated on, by using backslashes or quotes to tell the
       shell not to do the name expansion.  In general, when zip encounters a name in the list of files to do,  it  first  looks
       for the name in the file system.  If it finds it, it then adds it to the list of files to do.  If it does not find it, it
       looks for the name in the zip archive being modified (if it exists), using  the  pattern  matching  characters  described
       above,  if present.  For each match, it will add that name to the list of files to be processed, unless this name matches
       one given with the -x option, or does not match any name given with the -i option.

       The pattern matching includes the path, and so patterns like \*.o match names that end in ".o", no matter what  the  path
       prefix  is.   Note  that  the  backslash must precede every special character (i.e. ?*[]), or the entire argument must be
       enclosed in double quotes ("").

       In general, use backslashes or double quotes for paths that have wildcards to make zip do the pattern matching  for  file
       paths,  and  always for paths and strings that have spaces or wildcards for -i, -x, -R, -d, and -U and anywhere zip needs
       to process the wildcards.

ENVIRONMENT
       The following environment variables are read and used by zip as described.

       ZIPOPT
              contains default options that will be used when running zip.  The contents of this environment variable  will  get
              added to the command line just after the zip command.

       ZIP
              [Not on RISC OS and VMS] see ZIPOPT

       Zip$Options
              [RISC OS] see ZIPOPT

       Zip$Exts
              [RISC  OS]  contains extensions separated by a : that will cause native filenames with one of the specified exten‐
              sions to be added to the zip file with basename and extension swapped.

       ZIP_OPTS
              [VMS] see ZIPOPT

SEE ALSO
       compress(1), shar(1L), tar(1), unzip(1L), gzip(1L)

DIAGNOSTICS
       The exit status (or error level) approximates the exit codes defined by PKWARE and takes on the following values,  except
       under VMS:

              0      normal; no errors or warnings detected.

              2      unexpected end of zip file.

              3      a  generic  error  in  the zipfile format was detected.  Processing may have completed successfully anyway;
                     some broken zipfiles created by other archivers have simple work-arounds.

              4      zip was unable to allocate memory for one or more buffers during program initialization.

              5      a severe error in the zipfile format was detected.  Processing probably failed immediately.

              6      entry too large to be processed (such as input files larger than 2 GB when not using  Zip64  or  trying  to
                     read an existing archive that is too large) or entry too large to be split with zipsplit

              7      invalid comment format

              8      zip -T failed or out of memory

              9      the user aborted zip prematurely with control-C (or similar)

              10     zip encountered an error while using a temp file

              11     read or seek error

              12     zip has nothing to do

              13     missing or empty zip file

              14     error writing to a file

              15     zip was unable to create a file to write to

              16     bad command line parameters

              18     zip could not open a specified file to read

              19     zip was compiled with options not supported on this system

       VMS  interprets  standard Unix (or PC) return values as other, scarier-looking things, so zip instead maps them into VMS-
       style status codes.  In general, zip sets VMS Facility = 1955 (0x07A3), Code = 2* Unix_status, and an appropriate  Sever‐
       ity  (as  specified  in ziperr.h).  More details are included in the VMS-specific documentation.  See [.vms]NOTES.TXT and
       [.vms]vms_msg_gen.c.

BUGS
       zip 3.0 is not compatible with PKUNZIP 1.10. Use zip 1.1 to produce zip files which can be extracted by PKUNZIP 1.10.

       zip files produced by zip 3.0 must not be updated by zip 1.1 or PKZIP 1.10, if they contain encrypted members or if  they
       have  been  produced in a pipe or on a non-seekable device. The old versions of zip or PKZIP would create an archive with
       an incorrect format.  The old versions can list the contents of the zip file but cannot extract it anyway (because of the
       new  compression algorithm).  If you do not use encryption and use regular disk files, you do not have to care about this
       problem.

       Under VMS, not all of the odd file formats are treated properly.  Only stream-LF format zip files are  expected  to  work
       with  zip.  Others can be converted using Rahul Dhesi's BILF program.  This version of zip handles some of the conversion
       internally.  When using Kermit to transfer zip files from VMS to MSDOS, type "set file type block" on VMS.   When  trans‐
       fering from MSDOS to VMS, type "set file type fixed" on VMS.  In both cases, type "set file type binary" on MSDOS.

       Under some older VMS versions, zip may hang for file specifications that use DECnet syntax foo::*.*.

       On  OS/2, zip cannot match some names, such as those including an exclamation mark or a hash sign.  This is a bug in OS/2
       itself: the 32-bit DosFindFirst/Next don't find such names.  Other programs such as GNU tar are  also  affected  by  this
       bug.

       Under  OS/2,  the amount of Extended Attributes displayed by DIR is (for compatibility) the amount returned by the 16-bit
       version of DosQueryPathInfo(). Otherwise OS/2 1.3 and 2.0 would report different EA sizes when DIRing a  file.   However,
       the  structure  layout returned by the 32-bit DosQueryPathInfo() is a bit different, it uses extra padding bytes and link
       pointers (it's a linked list) to have all fields on 4-byte boundaries for  portability  to  future  RISC  OS/2  versions.
       Therefore the value reported by zip (which uses this 32-bit-mode size) differs from that reported by DIR.  zip stores the
       32-bit format for portability, even the 16-bit MS-C-compiled version running on OS/2 1.3, so  even  this  one  shows  the
       32-bit-mode size.

AUTHORS
       Copyright (C) 1997-2008 Info-ZIP.

       Currently distributed under the Info-ZIP license.

       Copyright  (C)  1990-1997  Mark Adler, Richard B. Wales, Jean-loup Gailly, Onno van der Linden, Kai Uwe Rommel, Igor Man‐
       drichenko, John Bush and Paul Kienitz.

       Original copyright:

       Permission is granted to any individual or institution to use, copy, or redistribute this software so long as all of  the
       original files are included, that it is not sold for profit, and that this copyright notice is retained.

       LIKE  ANYTHING  ELSE  THAT'S  FREE,  ZIP AND ITS ASSOCIATED UTILITIES ARE PROVIDED AS IS AND COME WITH NO WARRANTY OF ANY
       KIND, EITHER EXPRESSED OR IMPLIED. IN NO EVENT WILL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DAMAGES  RESULTING  FROM  THE
       USE OF THIS SOFTWARE.

       Please  send  bug reports and comments using the web page at: www.info-zip.org.  For bug reports, please include the ver‐
       sion of zip (see zip -h), the make options used to compile it (see zip -v), the machine and operating system in use,  and
       as much additional information as possible.

ACKNOWLEDGEMENTS
       Thanks  to  R.  P. Byrne for his Shrink.Pas program, which inspired this project, and from which the shrink algorithm was
       stolen; to Phil Katz for placing in the public domain the zip file format, compression format, and .ZIP  filename  exten‐
       sion,  and  for  accepting  minor  changes to the file format; to Steve Burg for clarifications on the deflate format; to
       Haruhiko Okumura and Leonid Broukhis for providing some useful ideas for the compression algorithm;  to  Keith  Petersen,
       Rich  Wales,  Hunter  Goatley and Mark Adler for providing a mailing list and ftp site for the Info-ZIP group to use; and
       most importantly, to the Info-ZIP group itself (listed in the file infozip.who) without whose tireless testing  and  bug-
       fixing  efforts  a portable zip would not have been possible.  Finally we should thank (blame) the first Info-ZIP modera‐
       tor, David Kirschbaum, for getting us into this mess in the first place.  The manual page was rewritten for Unix by R. P.
       C. Rodgers and updated by E. Gordon for zip 3.0.



Info-ZIP                                               16 June 2008 (v3.0)                                               ZIP(1L)
